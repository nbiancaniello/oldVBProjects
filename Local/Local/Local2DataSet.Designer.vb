'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Local2DataSet"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Local2DataSet
    Inherits System.Data.DataSet
    
    Private tableClientes As ClientesDataTable
    
    Private tableCompras As ComprasDataTable
    
    Private tableDetalleCompra As DetalleCompraDataTable
    
    Private tableDetalleVenta As DetalleVentaDataTable
    
    Private tableLocalidades As LocalidadesDataTable
    
    Private tableMarcas As MarcasDataTable
    
    Private tableModelos As ModelosDataTable
    
    Private tableProductos As ProductosDataTable
    
    Private tableProveedores As ProveedoresDataTable
    
    Private tableRubros As RubrosDataTable
    
    Private tableTalles As TallesDataTable
    
    Private tableTipoPago As TipoPagoDataTable
    
    Private tableVentas As VentasDataTable
    
    Private relationFK_Clientes_Localidades As System.Data.DataRelation
    
    Private relationFK_Compras_Proveedores As System.Data.DataRelation
    
    Private relationFK_DetalleCompra_Compras As System.Data.DataRelation
    
    Private relationFK_DetalleVenta_Ventas As System.Data.DataRelation
    
    Private relationFK_Productos_Marcas As System.Data.DataRelation
    
    Private relationFK_Productos_Modelos As System.Data.DataRelation
    
    Private relationFK_Productos_Rubros As System.Data.DataRelation
    
    Private relationFK_Productos_Talles As System.Data.DataRelation
    
    Private relationFK_Proveedores_Localidades As System.Data.DataRelation
    
    Private relationFK_Ventas_Clientes As System.Data.DataRelation
    
    Private relationFK_Ventas_TipoPago As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("Compras")) Is Nothing) Then
                MyBase.Tables.Add(New ComprasDataTable(ds.Tables("Compras")))
            End If
            If (Not (ds.Tables("DetalleCompra")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleCompraDataTable(ds.Tables("DetalleCompra")))
            End If
            If (Not (ds.Tables("DetalleVenta")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleVentaDataTable(ds.Tables("DetalleVenta")))
            End If
            If (Not (ds.Tables("Localidades")) Is Nothing) Then
                MyBase.Tables.Add(New LocalidadesDataTable(ds.Tables("Localidades")))
            End If
            If (Not (ds.Tables("Marcas")) Is Nothing) Then
                MyBase.Tables.Add(New MarcasDataTable(ds.Tables("Marcas")))
            End If
            If (Not (ds.Tables("Modelos")) Is Nothing) Then
                MyBase.Tables.Add(New ModelosDataTable(ds.Tables("Modelos")))
            End If
            If (Not (ds.Tables("Productos")) Is Nothing) Then
                MyBase.Tables.Add(New ProductosDataTable(ds.Tables("Productos")))
            End If
            If (Not (ds.Tables("Proveedores")) Is Nothing) Then
                MyBase.Tables.Add(New ProveedoresDataTable(ds.Tables("Proveedores")))
            End If
            If (Not (ds.Tables("Rubros")) Is Nothing) Then
                MyBase.Tables.Add(New RubrosDataTable(ds.Tables("Rubros")))
            End If
            If (Not (ds.Tables("Talles")) Is Nothing) Then
                MyBase.Tables.Add(New TallesDataTable(ds.Tables("Talles")))
            End If
            If (Not (ds.Tables("TipoPago")) Is Nothing) Then
                MyBase.Tables.Add(New TipoPagoDataTable(ds.Tables("TipoPago")))
            End If
            If (Not (ds.Tables("Ventas")) Is Nothing) Then
                MyBase.Tables.Add(New VentasDataTable(ds.Tables("Ventas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Clientes() As ClientesDataTable
        Get
            Return Me.tableClientes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Compras() As ComprasDataTable
        Get
            Return Me.tableCompras
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetalleCompra() As DetalleCompraDataTable
        Get
            Return Me.tableDetalleCompra
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetalleVenta() As DetalleVentaDataTable
        Get
            Return Me.tableDetalleVenta
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Localidades() As LocalidadesDataTable
        Get
            Return Me.tableLocalidades
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Marcas() As MarcasDataTable
        Get
            Return Me.tableMarcas
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Modelos() As ModelosDataTable
        Get
            Return Me.tableModelos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Productos() As ProductosDataTable
        Get
            Return Me.tableProductos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Proveedores() As ProveedoresDataTable
        Get
            Return Me.tableProveedores
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Rubros() As RubrosDataTable
        Get
            Return Me.tableRubros
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Talles() As TallesDataTable
        Get
            Return Me.tableTalles
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TipoPago() As TipoPagoDataTable
        Get
            Return Me.tableTipoPago
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Ventas() As VentasDataTable
        Get
            Return Me.tableVentas
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Local2DataSet = CType(MyBase.Clone,Local2DataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Clientes")) Is Nothing) Then
                MyBase.Tables.Add(New ClientesDataTable(ds.Tables("Clientes")))
            End If
            If (Not (ds.Tables("Compras")) Is Nothing) Then
                MyBase.Tables.Add(New ComprasDataTable(ds.Tables("Compras")))
            End If
            If (Not (ds.Tables("DetalleCompra")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleCompraDataTable(ds.Tables("DetalleCompra")))
            End If
            If (Not (ds.Tables("DetalleVenta")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleVentaDataTable(ds.Tables("DetalleVenta")))
            End If
            If (Not (ds.Tables("Localidades")) Is Nothing) Then
                MyBase.Tables.Add(New LocalidadesDataTable(ds.Tables("Localidades")))
            End If
            If (Not (ds.Tables("Marcas")) Is Nothing) Then
                MyBase.Tables.Add(New MarcasDataTable(ds.Tables("Marcas")))
            End If
            If (Not (ds.Tables("Modelos")) Is Nothing) Then
                MyBase.Tables.Add(New ModelosDataTable(ds.Tables("Modelos")))
            End If
            If (Not (ds.Tables("Productos")) Is Nothing) Then
                MyBase.Tables.Add(New ProductosDataTable(ds.Tables("Productos")))
            End If
            If (Not (ds.Tables("Proveedores")) Is Nothing) Then
                MyBase.Tables.Add(New ProveedoresDataTable(ds.Tables("Proveedores")))
            End If
            If (Not (ds.Tables("Rubros")) Is Nothing) Then
                MyBase.Tables.Add(New RubrosDataTable(ds.Tables("Rubros")))
            End If
            If (Not (ds.Tables("Talles")) Is Nothing) Then
                MyBase.Tables.Add(New TallesDataTable(ds.Tables("Talles")))
            End If
            If (Not (ds.Tables("TipoPago")) Is Nothing) Then
                MyBase.Tables.Add(New TipoPagoDataTable(ds.Tables("TipoPago")))
            End If
            If (Not (ds.Tables("Ventas")) Is Nothing) Then
                MyBase.Tables.Add(New VentasDataTable(ds.Tables("Ventas")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableClientes = CType(MyBase.Tables("Clientes"),ClientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientes) Is Nothing) Then
                Me.tableClientes.InitVars
            End If
        End If
        Me.tableCompras = CType(MyBase.Tables("Compras"),ComprasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCompras) Is Nothing) Then
                Me.tableCompras.InitVars
            End If
        End If
        Me.tableDetalleCompra = CType(MyBase.Tables("DetalleCompra"),DetalleCompraDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleCompra) Is Nothing) Then
                Me.tableDetalleCompra.InitVars
            End If
        End If
        Me.tableDetalleVenta = CType(MyBase.Tables("DetalleVenta"),DetalleVentaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleVenta) Is Nothing) Then
                Me.tableDetalleVenta.InitVars
            End If
        End If
        Me.tableLocalidades = CType(MyBase.Tables("Localidades"),LocalidadesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLocalidades) Is Nothing) Then
                Me.tableLocalidades.InitVars
            End If
        End If
        Me.tableMarcas = CType(MyBase.Tables("Marcas"),MarcasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMarcas) Is Nothing) Then
                Me.tableMarcas.InitVars
            End If
        End If
        Me.tableModelos = CType(MyBase.Tables("Modelos"),ModelosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableModelos) Is Nothing) Then
                Me.tableModelos.InitVars
            End If
        End If
        Me.tableProductos = CType(MyBase.Tables("Productos"),ProductosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProductos) Is Nothing) Then
                Me.tableProductos.InitVars
            End If
        End If
        Me.tableProveedores = CType(MyBase.Tables("Proveedores"),ProveedoresDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProveedores) Is Nothing) Then
                Me.tableProveedores.InitVars
            End If
        End If
        Me.tableRubros = CType(MyBase.Tables("Rubros"),RubrosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRubros) Is Nothing) Then
                Me.tableRubros.InitVars
            End If
        End If
        Me.tableTalles = CType(MyBase.Tables("Talles"),TallesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTalles) Is Nothing) Then
                Me.tableTalles.InitVars
            End If
        End If
        Me.tableTipoPago = CType(MyBase.Tables("TipoPago"),TipoPagoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTipoPago) Is Nothing) Then
                Me.tableTipoPago.InitVars
            End If
        End If
        Me.tableVentas = CType(MyBase.Tables("Ventas"),VentasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVentas) Is Nothing) Then
                Me.tableVentas.InitVars
            End If
        End If
        Me.relationFK_Clientes_Localidades = Me.Relations("FK_Clientes_Localidades")
        Me.relationFK_Compras_Proveedores = Me.Relations("FK_Compras_Proveedores")
        Me.relationFK_DetalleCompra_Compras = Me.Relations("FK_DetalleCompra_Compras")
        Me.relationFK_DetalleVenta_Ventas = Me.Relations("FK_DetalleVenta_Ventas")
        Me.relationFK_Productos_Marcas = Me.Relations("FK_Productos_Marcas")
        Me.relationFK_Productos_Modelos = Me.Relations("FK_Productos_Modelos")
        Me.relationFK_Productos_Rubros = Me.Relations("FK_Productos_Rubros")
        Me.relationFK_Productos_Talles = Me.Relations("FK_Productos_Talles")
        Me.relationFK_Proveedores_Localidades = Me.Relations("FK_Proveedores_Localidades")
        Me.relationFK_Ventas_Clientes = Me.Relations("FK_Ventas_Clientes")
        Me.relationFK_Ventas_TipoPago = Me.Relations("FK_Ventas_TipoPago")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Local2DataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Local2DataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableClientes = New ClientesDataTable
        MyBase.Tables.Add(Me.tableClientes)
        Me.tableCompras = New ComprasDataTable
        MyBase.Tables.Add(Me.tableCompras)
        Me.tableDetalleCompra = New DetalleCompraDataTable
        MyBase.Tables.Add(Me.tableDetalleCompra)
        Me.tableDetalleVenta = New DetalleVentaDataTable
        MyBase.Tables.Add(Me.tableDetalleVenta)
        Me.tableLocalidades = New LocalidadesDataTable
        MyBase.Tables.Add(Me.tableLocalidades)
        Me.tableMarcas = New MarcasDataTable
        MyBase.Tables.Add(Me.tableMarcas)
        Me.tableModelos = New ModelosDataTable
        MyBase.Tables.Add(Me.tableModelos)
        Me.tableProductos = New ProductosDataTable
        MyBase.Tables.Add(Me.tableProductos)
        Me.tableProveedores = New ProveedoresDataTable
        MyBase.Tables.Add(Me.tableProveedores)
        Me.tableRubros = New RubrosDataTable
        MyBase.Tables.Add(Me.tableRubros)
        Me.tableTalles = New TallesDataTable
        MyBase.Tables.Add(Me.tableTalles)
        Me.tableTipoPago = New TipoPagoDataTable
        MyBase.Tables.Add(Me.tableTipoPago)
        Me.tableVentas = New VentasDataTable
        MyBase.Tables.Add(Me.tableVentas)
        Me.relationFK_Clientes_Localidades = New System.Data.DataRelation("FK_Clientes_Localidades", New System.Data.DataColumn() {Me.tableLocalidades.codigo_postalColumn}, New System.Data.DataColumn() {Me.tableClientes.codigo_postalColumn}, false)
        Me.Relations.Add(Me.relationFK_Clientes_Localidades)
        Me.relationFK_Compras_Proveedores = New System.Data.DataRelation("FK_Compras_Proveedores", New System.Data.DataColumn() {Me.tableProveedores.codigo_proveedorColumn}, New System.Data.DataColumn() {Me.tableCompras.codigo_proveedorColumn}, false)
        Me.Relations.Add(Me.relationFK_Compras_Proveedores)
        Me.relationFK_DetalleCompra_Compras = New System.Data.DataRelation("FK_DetalleCompra_Compras", New System.Data.DataColumn() {Me.tableCompras.numero_facturaColumn, Me.tableCompras.codigo_proveedorColumn}, New System.Data.DataColumn() {Me.tableDetalleCompra.numero_facturaColumn, Me.tableDetalleCompra.codigo_proveedorColumn}, false)
        Me.Relations.Add(Me.relationFK_DetalleCompra_Compras)
        Me.relationFK_DetalleVenta_Ventas = New System.Data.DataRelation("FK_DetalleVenta_Ventas", New System.Data.DataColumn() {Me.tableVentas.numero_facturaColumn}, New System.Data.DataColumn() {Me.tableDetalleVenta.numero_facturaColumn}, false)
        Me.Relations.Add(Me.relationFK_DetalleVenta_Ventas)
        Me.relationFK_Productos_Marcas = New System.Data.DataRelation("FK_Productos_Marcas", New System.Data.DataColumn() {Me.tableMarcas.codigo_marcaColumn}, New System.Data.DataColumn() {Me.tableProductos.marcaColumn}, false)
        Me.Relations.Add(Me.relationFK_Productos_Marcas)
        Me.relationFK_Productos_Modelos = New System.Data.DataRelation("FK_Productos_Modelos", New System.Data.DataColumn() {Me.tableModelos.codigo_modeloColumn}, New System.Data.DataColumn() {Me.tableProductos.codigo_modeloColumn}, false)
        Me.Relations.Add(Me.relationFK_Productos_Modelos)
        Me.relationFK_Productos_Rubros = New System.Data.DataRelation("FK_Productos_Rubros", New System.Data.DataColumn() {Me.tableRubros.codigo_rubroColumn}, New System.Data.DataColumn() {Me.tableProductos.codigo_rubroColumn}, false)
        Me.Relations.Add(Me.relationFK_Productos_Rubros)
        Me.relationFK_Productos_Talles = New System.Data.DataRelation("FK_Productos_Talles", New System.Data.DataColumn() {Me.tableTalles.numero_talleColumn}, New System.Data.DataColumn() {Me.tableProductos.talleColumn}, false)
        Me.Relations.Add(Me.relationFK_Productos_Talles)
        Me.relationFK_Proveedores_Localidades = New System.Data.DataRelation("FK_Proveedores_Localidades", New System.Data.DataColumn() {Me.tableLocalidades.codigo_postalColumn}, New System.Data.DataColumn() {Me.tableProveedores.codigo_postalColumn}, false)
        Me.Relations.Add(Me.relationFK_Proveedores_Localidades)
        Me.relationFK_Ventas_Clientes = New System.Data.DataRelation("FK_Ventas_Clientes", New System.Data.DataColumn() {Me.tableClientes.codigo_clienteColumn}, New System.Data.DataColumn() {Me.tableVentas.codigo_clienteColumn}, false)
        Me.Relations.Add(Me.relationFK_Ventas_Clientes)
        Me.relationFK_Ventas_TipoPago = New System.Data.DataRelation("FK_Ventas_TipoPago", New System.Data.DataColumn() {Me.tableTipoPago.codigo_pagoColumn}, New System.Data.DataColumn() {Me.tableVentas.tipo_pagoColumn}, false)
        Me.Relations.Add(Me.relationFK_Ventas_TipoPago)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCompras() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleCompra() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleVenta() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLocalidades() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMarcas() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeModelos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProductos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProveedores() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRubros() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTalles() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTipoPago() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVentas() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Local2DataSet = New Local2DataSet
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ClientesRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientesRowChangeEvent)
    
    Public Delegate Sub ComprasRowChangeEventHandler(ByVal sender As Object, ByVal e As ComprasRowChangeEvent)
    
    Public Delegate Sub DetalleCompraRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleCompraRowChangeEvent)
    
    Public Delegate Sub DetalleVentaRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleVentaRowChangeEvent)
    
    Public Delegate Sub LocalidadesRowChangeEventHandler(ByVal sender As Object, ByVal e As LocalidadesRowChangeEvent)
    
    Public Delegate Sub MarcasRowChangeEventHandler(ByVal sender As Object, ByVal e As MarcasRowChangeEvent)
    
    Public Delegate Sub ModelosRowChangeEventHandler(ByVal sender As Object, ByVal e As ModelosRowChangeEvent)
    
    Public Delegate Sub ProductosRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductosRowChangeEvent)
    
    Public Delegate Sub ProveedoresRowChangeEventHandler(ByVal sender As Object, ByVal e As ProveedoresRowChangeEvent)
    
    Public Delegate Sub RubrosRowChangeEventHandler(ByVal sender As Object, ByVal e As RubrosRowChangeEvent)
    
    Public Delegate Sub TallesRowChangeEventHandler(ByVal sender As Object, ByVal e As TallesRowChangeEvent)
    
    Public Delegate Sub TipoPagoRowChangeEventHandler(ByVal sender As Object, ByVal e As TipoPagoRowChangeEvent)
    
    Public Delegate Sub VentasRowChangeEventHandler(ByVal sender As Object, ByVal e As VentasRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_cliente As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        Private columnapellido As System.Data.DataColumn
        
        Private columnnumero_documento As System.Data.DataColumn
        
        Private columndirección As System.Data.DataColumn
        
        Private columnnumero As System.Data.DataColumn
        
        Private columncodigo_postal As System.Data.DataColumn
        
        Private columntelefono As System.Data.DataColumn
        
        Private columncelular As System.Data.DataColumn
        
        Private columnemail As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Clientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_clienteColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_cliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property apellidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnapellido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numero_documentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero_documento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property direcciónColumn() As System.Data.DataColumn
            Get
                Return Me.columndirección
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_postalColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_postal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telefonoColumn() As System.Data.DataColumn
            Get
                Return Me.columntelefono
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property celularColumn() As System.Data.DataColumn
            Get
                Return Me.columncelular
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientesRow
            Get
                Return CType(Me.Rows(index),ClientesRow)
            End Get
        End Property
        
        Public Event ClientesRowChanging As ClientesRowChangeEventHandler
        
        Public Event ClientesRowChanged As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleting As ClientesRowChangeEventHandler
        
        Public Event ClientesRowDeleted As ClientesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientesRow(ByVal row As ClientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientesRow(ByVal codigo_cliente As Short, ByVal nombre As String, ByVal apellido As String, ByVal numero_documento As Integer, ByVal dirección As String, ByVal numero As Short, ByVal parentLocalidadesRowByFK_Clientes_Localidades As LocalidadesRow, ByVal telefono As String, ByVal celular As String, ByVal email As String) As ClientesRow
            Dim rowClientesRow As ClientesRow = CType(Me.NewRow,ClientesRow)
            rowClientesRow.ItemArray = New Object() {codigo_cliente, nombre, apellido, numero_documento, dirección, numero, parentLocalidadesRowByFK_Clientes_Localidades(0), telefono, celular, email}
            Me.Rows.Add(rowClientesRow)
            Return rowClientesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_cliente(ByVal codigo_cliente As Short) As ClientesRow
            Return CType(Me.Rows.Find(New Object() {codigo_cliente}),ClientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ClientesDataTable = CType(MyBase.Clone,ClientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ClientesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_cliente = MyBase.Columns("codigo_cliente")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnapellido = MyBase.Columns("apellido")
            Me.columnnumero_documento = MyBase.Columns("numero_documento")
            Me.columndirección = MyBase.Columns("dirección")
            Me.columnnumero = MyBase.Columns("numero")
            Me.columncodigo_postal = MyBase.Columns("codigo_postal")
            Me.columntelefono = MyBase.Columns("telefono")
            Me.columncelular = MyBase.Columns("celular")
            Me.columnemail = MyBase.Columns("email")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_cliente = New System.Data.DataColumn("codigo_cliente", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_cliente)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnapellido = New System.Data.DataColumn("apellido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapellido)
            Me.columnnumero_documento = New System.Data.DataColumn("numero_documento", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero_documento)
            Me.columndirección = New System.Data.DataColumn("dirección", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndirección)
            Me.columnnumero = New System.Data.DataColumn("numero", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero)
            Me.columncodigo_postal = New System.Data.DataColumn("codigo_postal", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_postal)
            Me.columntelefono = New System.Data.DataColumn("telefono", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelefono)
            Me.columncelular = New System.Data.DataColumn("celular", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncelular)
            Me.columnemail = New System.Data.DataColumn("email", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_cliente}, true))
            Me.columncodigo_cliente.AllowDBNull = false
            Me.columncodigo_cliente.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 30
            Me.columnapellido.AllowDBNull = false
            Me.columnapellido.MaxLength = 30
            Me.columnnumero_documento.AllowDBNull = false
            Me.columndirección.AllowDBNull = false
            Me.columndirección.MaxLength = 30
            Me.columnnumero.AllowDBNull = false
            Me.columncodigo_postal.AllowDBNull = false
            Me.columntelefono.MaxLength = 15
            Me.columncelular.MaxLength = 15
            Me.columnemail.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientesRow() As ClientesRow
            Return CType(Me.NewRow,ClientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ClientesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ClientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientesRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanged(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientesRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientesRowChanging(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleted(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientesRowDeleting(Me, New ClientesRowChangeEvent(CType(e.Row,ClientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientesRow(ByVal row As ClientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComprasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnumero_factura As System.Data.DataColumn
        
        Private columncodigo_proveedor As System.Data.DataColumn
        
        Private columnfecha_compra As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Compras"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numero_facturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero_factura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_proveedorColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_proveedor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_compraColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecha_compra
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComprasRow
            Get
                Return CType(Me.Rows(index),ComprasRow)
            End Get
        End Property
        
        Public Event ComprasRowChanging As ComprasRowChangeEventHandler
        
        Public Event ComprasRowChanged As ComprasRowChangeEventHandler
        
        Public Event ComprasRowDeleting As ComprasRowChangeEventHandler
        
        Public Event ComprasRowDeleted As ComprasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComprasRow(ByVal row As ComprasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComprasRow(ByVal numero_factura As Integer, ByVal parentProveedoresRowByFK_Compras_Proveedores As ProveedoresRow, ByVal fecha_compra As Date) As ComprasRow
            Dim rowComprasRow As ComprasRow = CType(Me.NewRow,ComprasRow)
            rowComprasRow.ItemArray = New Object() {numero_factura, parentProveedoresRowByFK_Compras_Proveedores(0), fecha_compra}
            Me.Rows.Add(rowComprasRow)
            Return rowComprasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynumero_facturacodigo_proveedor(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short) As ComprasRow
            Return CType(Me.Rows.Find(New Object() {numero_factura, codigo_proveedor}),ComprasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ComprasDataTable = CType(MyBase.Clone,ComprasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ComprasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumero_factura = MyBase.Columns("numero_factura")
            Me.columncodigo_proveedor = MyBase.Columns("codigo_proveedor")
            Me.columnfecha_compra = MyBase.Columns("fecha_compra")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumero_factura = New System.Data.DataColumn("numero_factura", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero_factura)
            Me.columncodigo_proveedor = New System.Data.DataColumn("codigo_proveedor", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_proveedor)
            Me.columnfecha_compra = New System.Data.DataColumn("fecha_compra", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_compra)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnnumero_factura, Me.columncodigo_proveedor}, true))
            Me.columnnumero_factura.AllowDBNull = false
            Me.columncodigo_proveedor.AllowDBNull = false
            Me.columnfecha_compra.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComprasRow() As ComprasRow
            Return CType(Me.NewRow,ComprasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ComprasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ComprasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComprasRowChangedEvent) Is Nothing) Then
                RaiseEvent ComprasRowChanged(Me, New ComprasRowChangeEvent(CType(e.Row,ComprasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComprasRowChangingEvent) Is Nothing) Then
                RaiseEvent ComprasRowChanging(Me, New ComprasRowChangeEvent(CType(e.Row,ComprasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComprasRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComprasRowDeleted(Me, New ComprasRowChangeEvent(CType(e.Row,ComprasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComprasRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComprasRowDeleting(Me, New ComprasRowChangeEvent(CType(e.Row,ComprasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComprasRow(ByVal row As ComprasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComprasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleCompraDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnumero_factura As System.Data.DataColumn
        
        Private columncodigo_proveedor As System.Data.DataColumn
        
        Private columncodigo_producto As System.Data.DataColumn
        
        Private columncantidad As System.Data.DataColumn
        
        Private columncosto As System.Data.DataColumn
        
        Private columnprecio_unitario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleCompra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numero_facturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero_factura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_proveedorColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_proveedor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_productoColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_producto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columncantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costoColumn() As System.Data.DataColumn
            Get
                Return Me.columncosto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precio_unitarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnprecio_unitario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleCompraRow
            Get
                Return CType(Me.Rows(index),DetalleCompraRow)
            End Get
        End Property
        
        Public Event DetalleCompraRowChanging As DetalleCompraRowChangeEventHandler
        
        Public Event DetalleCompraRowChanged As DetalleCompraRowChangeEventHandler
        
        Public Event DetalleCompraRowDeleting As DetalleCompraRowChangeEventHandler
        
        Public Event DetalleCompraRowDeleted As DetalleCompraRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleCompraRow(ByVal row As DetalleCompraRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleCompraRow(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short, ByVal codigo_producto As Short, ByVal cantidad As Byte, ByVal costo As Decimal, ByVal precio_unitario As Decimal) As DetalleCompraRow
            Dim rowDetalleCompraRow As DetalleCompraRow = CType(Me.NewRow,DetalleCompraRow)
            rowDetalleCompraRow.ItemArray = New Object() {numero_factura, codigo_proveedor, codigo_producto, cantidad, costo, precio_unitario}
            Me.Rows.Add(rowDetalleCompraRow)
            Return rowDetalleCompraRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynumero_facturacodigo_proveedorcodigo_producto(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short, ByVal codigo_producto As Short) As DetalleCompraRow
            Return CType(Me.Rows.Find(New Object() {numero_factura, codigo_proveedor, codigo_producto}),DetalleCompraRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DetalleCompraDataTable = CType(MyBase.Clone,DetalleCompraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DetalleCompraDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumero_factura = MyBase.Columns("numero_factura")
            Me.columncodigo_proveedor = MyBase.Columns("codigo_proveedor")
            Me.columncodigo_producto = MyBase.Columns("codigo_producto")
            Me.columncantidad = MyBase.Columns("cantidad")
            Me.columncosto = MyBase.Columns("costo")
            Me.columnprecio_unitario = MyBase.Columns("precio_unitario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumero_factura = New System.Data.DataColumn("numero_factura", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero_factura)
            Me.columncodigo_proveedor = New System.Data.DataColumn("codigo_proveedor", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_proveedor)
            Me.columncodigo_producto = New System.Data.DataColumn("codigo_producto", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_producto)
            Me.columncantidad = New System.Data.DataColumn("cantidad", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantidad)
            Me.columncosto = New System.Data.DataColumn("costo", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto)
            Me.columnprecio_unitario = New System.Data.DataColumn("precio_unitario", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio_unitario)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnnumero_factura, Me.columncodigo_proveedor, Me.columncodigo_producto}, true))
            Me.columnnumero_factura.AllowDBNull = false
            Me.columncodigo_proveedor.AllowDBNull = false
            Me.columncodigo_producto.AllowDBNull = false
            Me.columncantidad.AllowDBNull = false
            Me.columncosto.AllowDBNull = false
            Me.columnprecio_unitario.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleCompraRow() As DetalleCompraRow
            Return CType(Me.NewRow,DetalleCompraRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DetalleCompraRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetalleCompraRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleCompraRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleCompraRowChanged(Me, New DetalleCompraRowChangeEvent(CType(e.Row,DetalleCompraRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleCompraRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleCompraRowChanging(Me, New DetalleCompraRowChangeEvent(CType(e.Row,DetalleCompraRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleCompraRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleCompraRowDeleted(Me, New DetalleCompraRowChangeEvent(CType(e.Row,DetalleCompraRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleCompraRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleCompraRowDeleting(Me, New DetalleCompraRowChangeEvent(CType(e.Row,DetalleCompraRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleCompraRow(ByVal row As DetalleCompraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleCompraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleVentaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnumero_factura As System.Data.DataColumn
        
        Private columncodigo_producto As System.Data.DataColumn
        
        Private columncantidad As System.Data.DataColumn
        
        Private columncosto As System.Data.DataColumn
        
        Private columnprecio_venta As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleVenta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numero_facturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero_factura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_productoColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_producto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columncantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costoColumn() As System.Data.DataColumn
            Get
                Return Me.columncosto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precio_ventaColumn() As System.Data.DataColumn
            Get
                Return Me.columnprecio_venta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleVentaRow
            Get
                Return CType(Me.Rows(index),DetalleVentaRow)
            End Get
        End Property
        
        Public Event DetalleVentaRowChanging As DetalleVentaRowChangeEventHandler
        
        Public Event DetalleVentaRowChanged As DetalleVentaRowChangeEventHandler
        
        Public Event DetalleVentaRowDeleting As DetalleVentaRowChangeEventHandler
        
        Public Event DetalleVentaRowDeleted As DetalleVentaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleVentaRow(ByVal row As DetalleVentaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleVentaRow(ByVal parentVentasRowByFK_DetalleVenta_Ventas As VentasRow, ByVal codigo_producto As Short, ByVal cantidad As Byte, ByVal costo As Decimal, ByVal precio_venta As Decimal) As DetalleVentaRow
            Dim rowDetalleVentaRow As DetalleVentaRow = CType(Me.NewRow,DetalleVentaRow)
            rowDetalleVentaRow.ItemArray = New Object() {parentVentasRowByFK_DetalleVenta_Ventas(0), codigo_producto, cantidad, costo, precio_venta}
            Me.Rows.Add(rowDetalleVentaRow)
            Return rowDetalleVentaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynumero_facturacodigo_producto(ByVal numero_factura As Integer, ByVal codigo_producto As Short) As DetalleVentaRow
            Return CType(Me.Rows.Find(New Object() {numero_factura, codigo_producto}),DetalleVentaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DetalleVentaDataTable = CType(MyBase.Clone,DetalleVentaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DetalleVentaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumero_factura = MyBase.Columns("numero_factura")
            Me.columncodigo_producto = MyBase.Columns("codigo_producto")
            Me.columncantidad = MyBase.Columns("cantidad")
            Me.columncosto = MyBase.Columns("costo")
            Me.columnprecio_venta = MyBase.Columns("precio_venta")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumero_factura = New System.Data.DataColumn("numero_factura", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero_factura)
            Me.columncodigo_producto = New System.Data.DataColumn("codigo_producto", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_producto)
            Me.columncantidad = New System.Data.DataColumn("cantidad", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncantidad)
            Me.columncosto = New System.Data.DataColumn("costo", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto)
            Me.columnprecio_venta = New System.Data.DataColumn("precio_venta", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio_venta)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnnumero_factura, Me.columncodigo_producto}, true))
            Me.columnnumero_factura.AllowDBNull = false
            Me.columncodigo_producto.AllowDBNull = false
            Me.columncantidad.AllowDBNull = false
            Me.columncosto.AllowDBNull = false
            Me.columnprecio_venta.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleVentaRow() As DetalleVentaRow
            Return CType(Me.NewRow,DetalleVentaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DetalleVentaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetalleVentaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleVentaRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleVentaRowChanged(Me, New DetalleVentaRowChangeEvent(CType(e.Row,DetalleVentaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleVentaRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleVentaRowChanging(Me, New DetalleVentaRowChangeEvent(CType(e.Row,DetalleVentaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleVentaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleVentaRowDeleted(Me, New DetalleVentaRowChangeEvent(CType(e.Row,DetalleVentaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleVentaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleVentaRowDeleting(Me, New DetalleVentaRowChangeEvent(CType(e.Row,DetalleVentaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleVentaRow(ByVal row As DetalleVentaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleVentaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LocalidadesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_postal As System.Data.DataColumn
        
        Private columnlocalidad As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Localidades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_postalColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_postal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property localidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnlocalidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LocalidadesRow
            Get
                Return CType(Me.Rows(index),LocalidadesRow)
            End Get
        End Property
        
        Public Event LocalidadesRowChanging As LocalidadesRowChangeEventHandler
        
        Public Event LocalidadesRowChanged As LocalidadesRowChangeEventHandler
        
        Public Event LocalidadesRowDeleting As LocalidadesRowChangeEventHandler
        
        Public Event LocalidadesRowDeleted As LocalidadesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLocalidadesRow(ByVal row As LocalidadesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLocalidadesRow(ByVal codigo_postal As Short, ByVal localidad As String) As LocalidadesRow
            Dim rowLocalidadesRow As LocalidadesRow = CType(Me.NewRow,LocalidadesRow)
            rowLocalidadesRow.ItemArray = New Object() {codigo_postal, localidad}
            Me.Rows.Add(rowLocalidadesRow)
            Return rowLocalidadesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_postal(ByVal codigo_postal As Short) As LocalidadesRow
            Return CType(Me.Rows.Find(New Object() {codigo_postal}),LocalidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LocalidadesDataTable = CType(MyBase.Clone,LocalidadesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LocalidadesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_postal = MyBase.Columns("codigo_postal")
            Me.columnlocalidad = MyBase.Columns("localidad")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_postal = New System.Data.DataColumn("codigo_postal", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_postal)
            Me.columnlocalidad = New System.Data.DataColumn("localidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocalidad)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_postal}, true))
            Me.columncodigo_postal.AllowDBNull = false
            Me.columncodigo_postal.Unique = true
            Me.columnlocalidad.AllowDBNull = false
            Me.columnlocalidad.MaxLength = 20
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLocalidadesRow() As LocalidadesRow
            Return CType(Me.NewRow,LocalidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LocalidadesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LocalidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LocalidadesRowChangedEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowChanged(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LocalidadesRowChangingEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowChanging(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LocalidadesRowDeletedEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowDeleted(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LocalidadesRowDeletingEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowDeleting(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLocalidadesRow(ByVal row As LocalidadesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LocalidadesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MarcasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_marca As System.Data.DataColumn
        
        Private columndescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Marcas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_marcaColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_marca
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MarcasRow
            Get
                Return CType(Me.Rows(index),MarcasRow)
            End Get
        End Property
        
        Public Event MarcasRowChanging As MarcasRowChangeEventHandler
        
        Public Event MarcasRowChanged As MarcasRowChangeEventHandler
        
        Public Event MarcasRowDeleting As MarcasRowChangeEventHandler
        
        Public Event MarcasRowDeleted As MarcasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMarcasRow(ByVal row As MarcasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMarcasRow(ByVal codigo_marca As Byte, ByVal descripcion As String) As MarcasRow
            Dim rowMarcasRow As MarcasRow = CType(Me.NewRow,MarcasRow)
            rowMarcasRow.ItemArray = New Object() {codigo_marca, descripcion}
            Me.Rows.Add(rowMarcasRow)
            Return rowMarcasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_marca(ByVal codigo_marca As Byte) As MarcasRow
            Return CType(Me.Rows.Find(New Object() {codigo_marca}),MarcasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MarcasDataTable = CType(MyBase.Clone,MarcasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MarcasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_marca = MyBase.Columns("codigo_marca")
            Me.columndescripcion = MyBase.Columns("descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_marca = New System.Data.DataColumn("codigo_marca", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_marca)
            Me.columndescripcion = New System.Data.DataColumn("descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_marca}, true))
            Me.columncodigo_marca.AllowDBNull = false
            Me.columncodigo_marca.Unique = true
            Me.columndescripcion.AllowDBNull = false
            Me.columndescripcion.MaxLength = 20
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMarcasRow() As MarcasRow
            Return CType(Me.NewRow,MarcasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MarcasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MarcasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MarcasRowChangedEvent) Is Nothing) Then
                RaiseEvent MarcasRowChanged(Me, New MarcasRowChangeEvent(CType(e.Row,MarcasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MarcasRowChangingEvent) Is Nothing) Then
                RaiseEvent MarcasRowChanging(Me, New MarcasRowChangeEvent(CType(e.Row,MarcasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MarcasRowDeletedEvent) Is Nothing) Then
                RaiseEvent MarcasRowDeleted(Me, New MarcasRowChangeEvent(CType(e.Row,MarcasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MarcasRowDeletingEvent) Is Nothing) Then
                RaiseEvent MarcasRowDeleting(Me, New MarcasRowChangeEvent(CType(e.Row,MarcasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMarcasRow(ByVal row As MarcasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MarcasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ModelosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_modelo As System.Data.DataColumn
        
        Private columndescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Modelos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_modeloColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_modelo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ModelosRow
            Get
                Return CType(Me.Rows(index),ModelosRow)
            End Get
        End Property
        
        Public Event ModelosRowChanging As ModelosRowChangeEventHandler
        
        Public Event ModelosRowChanged As ModelosRowChangeEventHandler
        
        Public Event ModelosRowDeleting As ModelosRowChangeEventHandler
        
        Public Event ModelosRowDeleted As ModelosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddModelosRow(ByVal row As ModelosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddModelosRow(ByVal codigo_modelo As Byte, ByVal descripcion As String) As ModelosRow
            Dim rowModelosRow As ModelosRow = CType(Me.NewRow,ModelosRow)
            rowModelosRow.ItemArray = New Object() {codigo_modelo, descripcion}
            Me.Rows.Add(rowModelosRow)
            Return rowModelosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_modelo(ByVal codigo_modelo As Byte) As ModelosRow
            Return CType(Me.Rows.Find(New Object() {codigo_modelo}),ModelosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ModelosDataTable = CType(MyBase.Clone,ModelosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ModelosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_modelo = MyBase.Columns("codigo_modelo")
            Me.columndescripcion = MyBase.Columns("descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_modelo = New System.Data.DataColumn("codigo_modelo", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_modelo)
            Me.columndescripcion = New System.Data.DataColumn("descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_modelo}, true))
            Me.columncodigo_modelo.AllowDBNull = false
            Me.columncodigo_modelo.Unique = true
            Me.columndescripcion.AllowDBNull = false
            Me.columndescripcion.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewModelosRow() As ModelosRow
            Return CType(Me.NewRow,ModelosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ModelosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ModelosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ModelosRowChangedEvent) Is Nothing) Then
                RaiseEvent ModelosRowChanged(Me, New ModelosRowChangeEvent(CType(e.Row,ModelosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ModelosRowChangingEvent) Is Nothing) Then
                RaiseEvent ModelosRowChanging(Me, New ModelosRowChangeEvent(CType(e.Row,ModelosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ModelosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ModelosRowDeleted(Me, New ModelosRowChangeEvent(CType(e.Row,ModelosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ModelosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ModelosRowDeleting(Me, New ModelosRowChangeEvent(CType(e.Row,ModelosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveModelosRow(ByVal row As ModelosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ModelosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_anio As System.Data.DataColumn
        
        Private columncodigo_rubro As System.Data.DataColumn
        
        Private columncodigo_modelo As System.Data.DataColumn
        
        Private columntalle As System.Data.DataColumn
        
        Private columndetalle As System.Data.DataColumn
        
        Private columnmarca As System.Data.DataColumn
        
        Private columncosto As System.Data.DataColumn
        
        Private columnprecio_unitario As System.Data.DataColumn
        
        Private columnstock_actual As System.Data.DataColumn
        
        Private columnstock_minimo As System.Data.DataColumn
        
        Private columncodigo_interno As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Productos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_anioColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_anio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_rubroColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_rubro
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_modeloColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_modelo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property talleColumn() As System.Data.DataColumn
            Get
                Return Me.columntalle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property detalleColumn() As System.Data.DataColumn
            Get
                Return Me.columndetalle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property marcaColumn() As System.Data.DataColumn
            Get
                Return Me.columnmarca
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costoColumn() As System.Data.DataColumn
            Get
                Return Me.columncosto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precio_unitarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnprecio_unitario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stock_actualColumn() As System.Data.DataColumn
            Get
                Return Me.columnstock_actual
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property stock_minimoColumn() As System.Data.DataColumn
            Get
                Return Me.columnstock_minimo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_internoColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_interno
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductosRow
            Get
                Return CType(Me.Rows(index),ProductosRow)
            End Get
        End Property
        
        Public Event ProductosRowChanging As ProductosRowChangeEventHandler
        
        Public Event ProductosRowChanged As ProductosRowChangeEventHandler
        
        Public Event ProductosRowDeleting As ProductosRowChangeEventHandler
        
        Public Event ProductosRowDeleted As ProductosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductosRow(ByVal row As ProductosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductosRow(ByVal codigo_anio As Byte, ByVal parentRubrosRowByFK_Productos_Rubros As RubrosRow, ByVal parentModelosRowByFK_Productos_Modelos As ModelosRow, ByVal parentTallesRowByFK_Productos_Talles As TallesRow, ByVal detalle As String, ByVal parentMarcasRowByFK_Productos_Marcas As MarcasRow, ByVal costo As Decimal, ByVal precio_unitario As Decimal, ByVal stock_actual As Byte, ByVal stock_minimo As Byte, ByVal codigo_interno As Short) As ProductosRow
            Dim rowProductosRow As ProductosRow = CType(Me.NewRow,ProductosRow)
            rowProductosRow.ItemArray = New Object() {codigo_anio, parentRubrosRowByFK_Productos_Rubros(0), parentModelosRowByFK_Productos_Modelos(0), parentTallesRowByFK_Productos_Talles(0), detalle, parentMarcasRowByFK_Productos_Marcas(0), costo, precio_unitario, stock_actual, stock_minimo, codigo_interno}
            Me.Rows.Add(rowProductosRow)
            Return rowProductosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_aniocodigo_rubrocodigo_modelotalle(ByVal codigo_anio As Byte, ByVal codigo_rubro As Byte, ByVal codigo_modelo As Byte, ByVal talle As Byte) As ProductosRow
            Return CType(Me.Rows.Find(New Object() {codigo_anio, codigo_rubro, codigo_modelo, talle}),ProductosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProductosDataTable = CType(MyBase.Clone,ProductosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProductosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_anio = MyBase.Columns("codigo_anio")
            Me.columncodigo_rubro = MyBase.Columns("codigo_rubro")
            Me.columncodigo_modelo = MyBase.Columns("codigo_modelo")
            Me.columntalle = MyBase.Columns("talle")
            Me.columndetalle = MyBase.Columns("detalle")
            Me.columnmarca = MyBase.Columns("marca")
            Me.columncosto = MyBase.Columns("costo")
            Me.columnprecio_unitario = MyBase.Columns("precio_unitario")
            Me.columnstock_actual = MyBase.Columns("stock_actual")
            Me.columnstock_minimo = MyBase.Columns("stock_minimo")
            Me.columncodigo_interno = MyBase.Columns("codigo_interno")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_anio = New System.Data.DataColumn("codigo_anio", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_anio)
            Me.columncodigo_rubro = New System.Data.DataColumn("codigo_rubro", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_rubro)
            Me.columncodigo_modelo = New System.Data.DataColumn("codigo_modelo", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_modelo)
            Me.columntalle = New System.Data.DataColumn("talle", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntalle)
            Me.columndetalle = New System.Data.DataColumn("detalle", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndetalle)
            Me.columnmarca = New System.Data.DataColumn("marca", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmarca)
            Me.columncosto = New System.Data.DataColumn("costo", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto)
            Me.columnprecio_unitario = New System.Data.DataColumn("precio_unitario", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio_unitario)
            Me.columnstock_actual = New System.Data.DataColumn("stock_actual", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstock_actual)
            Me.columnstock_minimo = New System.Data.DataColumn("stock_minimo", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstock_minimo)
            Me.columncodigo_interno = New System.Data.DataColumn("codigo_interno", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_interno)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_anio, Me.columncodigo_rubro, Me.columncodigo_modelo, Me.columntalle}, true))
            Me.columncodigo_anio.AllowDBNull = false
            Me.columncodigo_rubro.AllowDBNull = false
            Me.columncodigo_modelo.AllowDBNull = false
            Me.columntalle.AllowDBNull = false
            Me.columndetalle.MaxLength = 20
            Me.columnmarca.AllowDBNull = false
            Me.columncosto.AllowDBNull = false
            Me.columnprecio_unitario.AllowDBNull = false
            Me.columnstock_actual.AllowDBNull = false
            Me.columnstock_minimo.AllowDBNull = false
            Me.columncodigo_interno.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductosRow() As ProductosRow
            Return CType(Me.NewRow,ProductosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProductosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProductosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductosRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductosRowChanged(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductosRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductosRowChanging(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductosRowDeleted(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductosRowDeleting(Me, New ProductosRowChangeEvent(CType(e.Row,ProductosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductosRow(ByVal row As ProductosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProveedoresDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_proveedor As System.Data.DataColumn
        
        Private columnnombre As System.Data.DataColumn
        
        Private columnapellido As System.Data.DataColumn
        
        Private columndireccion As System.Data.DataColumn
        
        Private columnnumero As System.Data.DataColumn
        
        Private columncodigo_postal As System.Data.DataColumn
        
        Private columntelefono As System.Data.DataColumn
        
        Private columncelular As System.Data.DataColumn
        
        Private columnemail As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Proveedores"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_proveedorColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_proveedor
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property nombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnnombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property apellidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnapellido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property direccionColumn() As System.Data.DataColumn
            Get
                Return Me.columndireccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numeroColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_postalColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_postal
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property telefonoColumn() As System.Data.DataColumn
            Get
                Return Me.columntelefono
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property celularColumn() As System.Data.DataColumn
            Get
                Return Me.columncelular
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property emailColumn() As System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProveedoresRow
            Get
                Return CType(Me.Rows(index),ProveedoresRow)
            End Get
        End Property
        
        Public Event ProveedoresRowChanging As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowChanged As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowDeleting As ProveedoresRowChangeEventHandler
        
        Public Event ProveedoresRowDeleted As ProveedoresRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProveedoresRow(ByVal row As ProveedoresRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProveedoresRow(ByVal codigo_proveedor As Short, ByVal nombre As String, ByVal apellido As String, ByVal direccion As String, ByVal numero As Short, ByVal parentLocalidadesRowByFK_Proveedores_Localidades As LocalidadesRow, ByVal telefono As String, ByVal celular As String, ByVal email As String) As ProveedoresRow
            Dim rowProveedoresRow As ProveedoresRow = CType(Me.NewRow,ProveedoresRow)
            rowProveedoresRow.ItemArray = New Object() {codigo_proveedor, nombre, apellido, direccion, numero, parentLocalidadesRowByFK_Proveedores_Localidades(0), telefono, celular, email}
            Me.Rows.Add(rowProveedoresRow)
            Return rowProveedoresRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_proveedor(ByVal codigo_proveedor As Short) As ProveedoresRow
            Return CType(Me.Rows.Find(New Object() {codigo_proveedor}),ProveedoresRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProveedoresDataTable = CType(MyBase.Clone,ProveedoresDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProveedoresDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_proveedor = MyBase.Columns("codigo_proveedor")
            Me.columnnombre = MyBase.Columns("nombre")
            Me.columnapellido = MyBase.Columns("apellido")
            Me.columndireccion = MyBase.Columns("direccion")
            Me.columnnumero = MyBase.Columns("numero")
            Me.columncodigo_postal = MyBase.Columns("codigo_postal")
            Me.columntelefono = MyBase.Columns("telefono")
            Me.columncelular = MyBase.Columns("celular")
            Me.columnemail = MyBase.Columns("email")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_proveedor = New System.Data.DataColumn("codigo_proveedor", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_proveedor)
            Me.columnnombre = New System.Data.DataColumn("nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnombre)
            Me.columnapellido = New System.Data.DataColumn("apellido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapellido)
            Me.columndireccion = New System.Data.DataColumn("direccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndireccion)
            Me.columnnumero = New System.Data.DataColumn("numero", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero)
            Me.columncodigo_postal = New System.Data.DataColumn("codigo_postal", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_postal)
            Me.columntelefono = New System.Data.DataColumn("telefono", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelefono)
            Me.columncelular = New System.Data.DataColumn("celular", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncelular)
            Me.columnemail = New System.Data.DataColumn("email", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_proveedor}, true))
            Me.columncodigo_proveedor.AllowDBNull = false
            Me.columncodigo_proveedor.Unique = true
            Me.columnnombre.AllowDBNull = false
            Me.columnnombre.MaxLength = 20
            Me.columnapellido.AllowDBNull = false
            Me.columnapellido.MaxLength = 20
            Me.columndireccion.AllowDBNull = false
            Me.columndireccion.MaxLength = 20
            Me.columnnumero.AllowDBNull = false
            Me.columncodigo_postal.AllowDBNull = false
            Me.columntelefono.MaxLength = 20
            Me.columncelular.MaxLength = 12
            Me.columnemail.MaxLength = 40
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProveedoresRow() As ProveedoresRow
            Return CType(Me.NewRow,ProveedoresRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProveedoresRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProveedoresRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProveedoresRowChangedEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowChanged(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProveedoresRowChangingEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowChanging(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProveedoresRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowDeleted(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProveedoresRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProveedoresRowDeleting(Me, New ProveedoresRowChangeEvent(CType(e.Row,ProveedoresRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProveedoresRow(ByVal row As ProveedoresRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProveedoresDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RubrosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_rubro As System.Data.DataColumn
        
        Private columndescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Rubros"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_rubroColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_rubro
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RubrosRow
            Get
                Return CType(Me.Rows(index),RubrosRow)
            End Get
        End Property
        
        Public Event RubrosRowChanging As RubrosRowChangeEventHandler
        
        Public Event RubrosRowChanged As RubrosRowChangeEventHandler
        
        Public Event RubrosRowDeleting As RubrosRowChangeEventHandler
        
        Public Event RubrosRowDeleted As RubrosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRubrosRow(ByVal row As RubrosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRubrosRow(ByVal codigo_rubro As Byte, ByVal descripcion As String) As RubrosRow
            Dim rowRubrosRow As RubrosRow = CType(Me.NewRow,RubrosRow)
            rowRubrosRow.ItemArray = New Object() {codigo_rubro, descripcion}
            Me.Rows.Add(rowRubrosRow)
            Return rowRubrosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_rubro(ByVal codigo_rubro As Byte) As RubrosRow
            Return CType(Me.Rows.Find(New Object() {codigo_rubro}),RubrosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RubrosDataTable = CType(MyBase.Clone,RubrosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RubrosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_rubro = MyBase.Columns("codigo_rubro")
            Me.columndescripcion = MyBase.Columns("descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_rubro = New System.Data.DataColumn("codigo_rubro", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_rubro)
            Me.columndescripcion = New System.Data.DataColumn("descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_rubro}, true))
            Me.columncodigo_rubro.AllowDBNull = false
            Me.columncodigo_rubro.Unique = true
            Me.columndescripcion.AllowDBNull = false
            Me.columndescripcion.MaxLength = 15
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRubrosRow() As RubrosRow
            Return CType(Me.NewRow,RubrosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RubrosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RubrosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RubrosRowChangedEvent) Is Nothing) Then
                RaiseEvent RubrosRowChanged(Me, New RubrosRowChangeEvent(CType(e.Row,RubrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RubrosRowChangingEvent) Is Nothing) Then
                RaiseEvent RubrosRowChanging(Me, New RubrosRowChangeEvent(CType(e.Row,RubrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RubrosRowDeletedEvent) Is Nothing) Then
                RaiseEvent RubrosRowDeleted(Me, New RubrosRowChangeEvent(CType(e.Row,RubrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RubrosRowDeletingEvent) Is Nothing) Then
                RaiseEvent RubrosRowDeleting(Me, New RubrosRowChangeEvent(CType(e.Row,RubrosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRubrosRow(ByVal row As RubrosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RubrosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TallesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnumero_talle As System.Data.DataColumn
        
        Private columnsigla As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Talles"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numero_talleColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero_talle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property siglaColumn() As System.Data.DataColumn
            Get
                Return Me.columnsigla
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TallesRow
            Get
                Return CType(Me.Rows(index),TallesRow)
            End Get
        End Property
        
        Public Event TallesRowChanging As TallesRowChangeEventHandler
        
        Public Event TallesRowChanged As TallesRowChangeEventHandler
        
        Public Event TallesRowDeleting As TallesRowChangeEventHandler
        
        Public Event TallesRowDeleted As TallesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTallesRow(ByVal row As TallesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTallesRow(ByVal numero_talle As Byte, ByVal sigla As String) As TallesRow
            Dim rowTallesRow As TallesRow = CType(Me.NewRow,TallesRow)
            rowTallesRow.ItemArray = New Object() {numero_talle, sigla}
            Me.Rows.Add(rowTallesRow)
            Return rowTallesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynumero_talle(ByVal numero_talle As Byte) As TallesRow
            Return CType(Me.Rows.Find(New Object() {numero_talle}),TallesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TallesDataTable = CType(MyBase.Clone,TallesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TallesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumero_talle = MyBase.Columns("numero_talle")
            Me.columnsigla = MyBase.Columns("sigla")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumero_talle = New System.Data.DataColumn("numero_talle", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero_talle)
            Me.columnsigla = New System.Data.DataColumn("sigla", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsigla)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnnumero_talle}, true))
            Me.columnnumero_talle.AllowDBNull = false
            Me.columnnumero_talle.Unique = true
            Me.columnsigla.AllowDBNull = false
            Me.columnsigla.MaxLength = 3
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTallesRow() As TallesRow
            Return CType(Me.NewRow,TallesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TallesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TallesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TallesRowChangedEvent) Is Nothing) Then
                RaiseEvent TallesRowChanged(Me, New TallesRowChangeEvent(CType(e.Row,TallesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TallesRowChangingEvent) Is Nothing) Then
                RaiseEvent TallesRowChanging(Me, New TallesRowChangeEvent(CType(e.Row,TallesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TallesRowDeletedEvent) Is Nothing) Then
                RaiseEvent TallesRowDeleted(Me, New TallesRowChangeEvent(CType(e.Row,TallesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TallesRowDeletingEvent) Is Nothing) Then
                RaiseEvent TallesRowDeleting(Me, New TallesRowChangeEvent(CType(e.Row,TallesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTallesRow(ByVal row As TallesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TallesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TipoPagoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columncodigo_pago As System.Data.DataColumn
        
        Private columndescripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TipoPago"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_pagoColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_pago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TipoPagoRow
            Get
                Return CType(Me.Rows(index),TipoPagoRow)
            End Get
        End Property
        
        Public Event TipoPagoRowChanging As TipoPagoRowChangeEventHandler
        
        Public Event TipoPagoRowChanged As TipoPagoRowChangeEventHandler
        
        Public Event TipoPagoRowDeleting As TipoPagoRowChangeEventHandler
        
        Public Event TipoPagoRowDeleted As TipoPagoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTipoPagoRow(ByVal row As TipoPagoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTipoPagoRow(ByVal codigo_pago As Byte, ByVal descripcion As String) As TipoPagoRow
            Dim rowTipoPagoRow As TipoPagoRow = CType(Me.NewRow,TipoPagoRow)
            rowTipoPagoRow.ItemArray = New Object() {codigo_pago, descripcion}
            Me.Rows.Add(rowTipoPagoRow)
            Return rowTipoPagoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBycodigo_pago(ByVal codigo_pago As Byte) As TipoPagoRow
            Return CType(Me.Rows.Find(New Object() {codigo_pago}),TipoPagoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TipoPagoDataTable = CType(MyBase.Clone,TipoPagoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TipoPagoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columncodigo_pago = MyBase.Columns("codigo_pago")
            Me.columndescripcion = MyBase.Columns("descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columncodigo_pago = New System.Data.DataColumn("codigo_pago", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_pago)
            Me.columndescripcion = New System.Data.DataColumn("descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columncodigo_pago}, true))
            Me.columncodigo_pago.AllowDBNull = false
            Me.columncodigo_pago.Unique = true
            Me.columndescripcion.AllowDBNull = false
            Me.columndescripcion.MaxLength = 15
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTipoPagoRow() As TipoPagoRow
            Return CType(Me.NewRow,TipoPagoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TipoPagoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TipoPagoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TipoPagoRowChangedEvent) Is Nothing) Then
                RaiseEvent TipoPagoRowChanged(Me, New TipoPagoRowChangeEvent(CType(e.Row,TipoPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TipoPagoRowChangingEvent) Is Nothing) Then
                RaiseEvent TipoPagoRowChanging(Me, New TipoPagoRowChangeEvent(CType(e.Row,TipoPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TipoPagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TipoPagoRowDeleted(Me, New TipoPagoRowChangeEvent(CType(e.Row,TipoPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TipoPagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TipoPagoRowDeleting(Me, New TipoPagoRowChangeEvent(CType(e.Row,TipoPagoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTipoPagoRow(ByVal row As TipoPagoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TipoPagoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VentasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnnumero_factura As System.Data.DataColumn
        
        Private columnfecha_venta As System.Data.DataColumn
        
        Private columntipo_pago As System.Data.DataColumn
        
        Private columnempresa As System.Data.DataColumn
        
        Private columncuotas As System.Data.DataColumn
        
        Private columncodigo_cliente As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Ventas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property numero_facturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnnumero_factura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_ventaColumn() As System.Data.DataColumn
            Get
                Return Me.columnfecha_venta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipo_pagoColumn() As System.Data.DataColumn
            Get
                Return Me.columntipo_pago
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property empresaColumn() As System.Data.DataColumn
            Get
                Return Me.columnempresa
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cuotasColumn() As System.Data.DataColumn
            Get
                Return Me.columncuotas
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property codigo_clienteColumn() As System.Data.DataColumn
            Get
                Return Me.columncodigo_cliente
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VentasRow
            Get
                Return CType(Me.Rows(index),VentasRow)
            End Get
        End Property
        
        Public Event VentasRowChanging As VentasRowChangeEventHandler
        
        Public Event VentasRowChanged As VentasRowChangeEventHandler
        
        Public Event VentasRowDeleting As VentasRowChangeEventHandler
        
        Public Event VentasRowDeleted As VentasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVentasRow(ByVal row As VentasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVentasRow(ByVal numero_factura As Integer, ByVal fecha_venta As Date, ByVal parentTipoPagoRowByFK_Ventas_TipoPago As TipoPagoRow, ByVal empresa As Byte, ByVal cuotas As Byte, ByVal parentClientesRowByFK_Ventas_Clientes As ClientesRow) As VentasRow
            Dim rowVentasRow As VentasRow = CType(Me.NewRow,VentasRow)
            rowVentasRow.ItemArray = New Object() {numero_factura, fecha_venta, parentTipoPagoRowByFK_Ventas_TipoPago(0), empresa, cuotas, parentClientesRowByFK_Ventas_Clientes(0)}
            Me.Rows.Add(rowVentasRow)
            Return rowVentasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBynumero_factura(ByVal numero_factura As Integer) As VentasRow
            Return CType(Me.Rows.Find(New Object() {numero_factura}),VentasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VentasDataTable = CType(MyBase.Clone,VentasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VentasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnnumero_factura = MyBase.Columns("numero_factura")
            Me.columnfecha_venta = MyBase.Columns("fecha_venta")
            Me.columntipo_pago = MyBase.Columns("tipo_pago")
            Me.columnempresa = MyBase.Columns("empresa")
            Me.columncuotas = MyBase.Columns("cuotas")
            Me.columncodigo_cliente = MyBase.Columns("codigo_cliente")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnnumero_factura = New System.Data.DataColumn("numero_factura", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnumero_factura)
            Me.columnfecha_venta = New System.Data.DataColumn("fecha_venta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_venta)
            Me.columntipo_pago = New System.Data.DataColumn("tipo_pago", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo_pago)
            Me.columnempresa = New System.Data.DataColumn("empresa", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnempresa)
            Me.columncuotas = New System.Data.DataColumn("cuotas", GetType(Byte), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncuotas)
            Me.columncodigo_cliente = New System.Data.DataColumn("codigo_cliente", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodigo_cliente)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnnumero_factura}, true))
            Me.columnnumero_factura.AllowDBNull = false
            Me.columnnumero_factura.Unique = true
            Me.columnfecha_venta.AllowDBNull = false
            Me.columntipo_pago.AllowDBNull = false
            Me.columnempresa.AllowDBNull = false
            Me.columncuotas.AllowDBNull = false
            Me.columncodigo_cliente.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVentasRow() As VentasRow
            Return CType(Me.NewRow,VentasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VentasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VentasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VentasRowChangedEvent) Is Nothing) Then
                RaiseEvent VentasRowChanged(Me, New VentasRowChangeEvent(CType(e.Row,VentasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VentasRowChangingEvent) Is Nothing) Then
                RaiseEvent VentasRowChanging(Me, New VentasRowChangeEvent(CType(e.Row,VentasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VentasRowDeletedEvent) Is Nothing) Then
                RaiseEvent VentasRowDeleted(Me, New VentasRowChangeEvent(CType(e.Row,VentasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VentasRowDeletingEvent) Is Nothing) Then
                RaiseEvent VentasRowDeleting(Me, New VentasRowChangeEvent(CType(e.Row,VentasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVentasRow(ByVal row As VentasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Local2DataSet = New Local2DataSet
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VentasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientesRow
        Inherits System.Data.DataRow
        
        Private tableClientes As ClientesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientes = CType(Me.Table,ClientesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_cliente() As Short
            Get
                Return CType(Me(Me.tableClientes.codigo_clienteColumn),Short)
            End Get
            Set
                Me(Me.tableClientes.codigo_clienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableClientes.nombreColumn),String)
            End Get
            Set
                Me(Me.tableClientes.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apellido() As String
            Get
                Return CType(Me(Me.tableClientes.apellidoColumn),String)
            End Get
            Set
                Me(Me.tableClientes.apellidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero_documento() As Integer
            Get
                Return CType(Me(Me.tableClientes.numero_documentoColumn),Integer)
            End Get
            Set
                Me(Me.tableClientes.numero_documentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property dirección() As String
            Get
                Return CType(Me(Me.tableClientes.direcciónColumn),String)
            End Get
            Set
                Me(Me.tableClientes.direcciónColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero() As Short
            Get
                Return CType(Me(Me.tableClientes.numeroColumn),Short)
            End Get
            Set
                Me(Me.tableClientes.numeroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_postal() As Short
            Get
                Return CType(Me(Me.tableClientes.codigo_postalColumn),Short)
            End Get
            Set
                Me(Me.tableClientes.codigo_postalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.telefonoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'telefono' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.telefonoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property celular() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.celularColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'celular' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.celularColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableClientes.emailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'Clientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientes.emailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalidadesRow() As LocalidadesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Clientes_Localidades")),LocalidadesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Clientes_Localidades"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelefonoNull() As Boolean
            Return Me.IsNull(Me.tableClientes.telefonoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelefonoNull()
            Me(Me.tableClientes.telefonoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscelularNull() As Boolean
            Return Me.IsNull(Me.tableClientes.celularColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcelularNull()
            Me(Me.tableClientes.celularColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableClientes.emailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableClientes.emailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVentasRows() As VentasRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Ventas_Clientes")),VentasRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComprasRow
        Inherits System.Data.DataRow
        
        Private tableCompras As ComprasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCompras = CType(Me.Table,ComprasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero_factura() As Integer
            Get
                Return CType(Me(Me.tableCompras.numero_facturaColumn),Integer)
            End Get
            Set
                Me(Me.tableCompras.numero_facturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_proveedor() As Short
            Get
                Return CType(Me(Me.tableCompras.codigo_proveedorColumn),Short)
            End Get
            Set
                Me(Me.tableCompras.codigo_proveedorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_compra() As Date
            Get
                Return CType(Me(Me.tableCompras.fecha_compraColumn),Date)
            End Get
            Set
                Me(Me.tableCompras.fecha_compraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProveedoresRow() As ProveedoresRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Compras_Proveedores")),ProveedoresRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Compras_Proveedores"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDetalleCompraRows() As DetalleCompraRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DetalleCompra_Compras")),DetalleCompraRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DetalleCompraRow
        Inherits System.Data.DataRow
        
        Private tableDetalleCompra As DetalleCompraDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleCompra = CType(Me.Table,DetalleCompraDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero_factura() As Integer
            Get
                Return CType(Me(Me.tableDetalleCompra.numero_facturaColumn),Integer)
            End Get
            Set
                Me(Me.tableDetalleCompra.numero_facturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_proveedor() As Short
            Get
                Return CType(Me(Me.tableDetalleCompra.codigo_proveedorColumn),Short)
            End Get
            Set
                Me(Me.tableDetalleCompra.codigo_proveedorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_producto() As Short
            Get
                Return CType(Me(Me.tableDetalleCompra.codigo_productoColumn),Short)
            End Get
            Set
                Me(Me.tableDetalleCompra.codigo_productoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantidad() As Byte
            Get
                Return CType(Me(Me.tableDetalleCompra.cantidadColumn),Byte)
            End Get
            Set
                Me(Me.tableDetalleCompra.cantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo() As Decimal
            Get
                Return CType(Me(Me.tableDetalleCompra.costoColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleCompra.costoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio_unitario() As Decimal
            Get
                Return CType(Me(Me.tableDetalleCompra.precio_unitarioColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleCompra.precio_unitarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComprasRowParent() As ComprasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DetalleCompra_Compras")),ComprasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DetalleCompra_Compras"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DetalleVentaRow
        Inherits System.Data.DataRow
        
        Private tableDetalleVenta As DetalleVentaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleVenta = CType(Me.Table,DetalleVentaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero_factura() As Integer
            Get
                Return CType(Me(Me.tableDetalleVenta.numero_facturaColumn),Integer)
            End Get
            Set
                Me(Me.tableDetalleVenta.numero_facturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_producto() As Short
            Get
                Return CType(Me(Me.tableDetalleVenta.codigo_productoColumn),Short)
            End Get
            Set
                Me(Me.tableDetalleVenta.codigo_productoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cantidad() As Byte
            Get
                Return CType(Me(Me.tableDetalleVenta.cantidadColumn),Byte)
            End Get
            Set
                Me(Me.tableDetalleVenta.cantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo() As Decimal
            Get
                Return CType(Me(Me.tableDetalleVenta.costoColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleVenta.costoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio_venta() As Decimal
            Get
                Return CType(Me(Me.tableDetalleVenta.precio_ventaColumn),Decimal)
            End Get
            Set
                Me(Me.tableDetalleVenta.precio_ventaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VentasRow() As VentasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DetalleVenta_Ventas")),VentasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DetalleVenta_Ventas"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LocalidadesRow
        Inherits System.Data.DataRow
        
        Private tableLocalidades As LocalidadesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLocalidades = CType(Me.Table,LocalidadesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_postal() As Short
            Get
                Return CType(Me(Me.tableLocalidades.codigo_postalColumn),Short)
            End Get
            Set
                Me(Me.tableLocalidades.codigo_postalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property localidad() As String
            Get
                Return CType(Me(Me.tableLocalidades.localidadColumn),String)
            End Get
            Set
                Me(Me.tableLocalidades.localidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientesRows() As ClientesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Clientes_Localidades")),ClientesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProveedoresRows() As ProveedoresRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Proveedores_Localidades")),ProveedoresRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MarcasRow
        Inherits System.Data.DataRow
        
        Private tableMarcas As MarcasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMarcas = CType(Me.Table,MarcasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_marca() As Byte
            Get
                Return CType(Me(Me.tableMarcas.codigo_marcaColumn),Byte)
            End Get
            Set
                Me(Me.tableMarcas.codigo_marcaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Return CType(Me(Me.tableMarcas.descripcionColumn),String)
            End Get
            Set
                Me(Me.tableMarcas.descripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductosRows() As ProductosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Productos_Marcas")),ProductosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ModelosRow
        Inherits System.Data.DataRow
        
        Private tableModelos As ModelosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableModelos = CType(Me.Table,ModelosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_modelo() As Byte
            Get
                Return CType(Me(Me.tableModelos.codigo_modeloColumn),Byte)
            End Get
            Set
                Me(Me.tableModelos.codigo_modeloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Return CType(Me(Me.tableModelos.descripcionColumn),String)
            End Get
            Set
                Me(Me.tableModelos.descripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductosRows() As ProductosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Productos_Modelos")),ProductosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProductosRow
        Inherits System.Data.DataRow
        
        Private tableProductos As ProductosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductos = CType(Me.Table,ProductosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_anio() As Byte
            Get
                Return CType(Me(Me.tableProductos.codigo_anioColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.codigo_anioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_rubro() As Byte
            Get
                Return CType(Me(Me.tableProductos.codigo_rubroColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.codigo_rubroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_modelo() As Byte
            Get
                Return CType(Me(Me.tableProductos.codigo_modeloColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.codigo_modeloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property talle() As Byte
            Get
                Return CType(Me(Me.tableProductos.talleColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.talleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property detalle() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductos.detalleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'detalle' de la tabla 'Productos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductos.detalleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property marca() As Byte
            Get
                Return CType(Me(Me.tableProductos.marcaColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.marcaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo() As Decimal
            Get
                Return CType(Me(Me.tableProductos.costoColumn),Decimal)
            End Get
            Set
                Me(Me.tableProductos.costoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio_unitario() As Decimal
            Get
                Return CType(Me(Me.tableProductos.precio_unitarioColumn),Decimal)
            End Get
            Set
                Me(Me.tableProductos.precio_unitarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stock_actual() As Byte
            Get
                Return CType(Me(Me.tableProductos.stock_actualColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.stock_actualColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property stock_minimo() As Byte
            Get
                Return CType(Me(Me.tableProductos.stock_minimoColumn),Byte)
            End Get
            Set
                Me(Me.tableProductos.stock_minimoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_interno() As Short
            Get
                Return CType(Me(Me.tableProductos.codigo_internoColumn),Short)
            End Get
            Set
                Me(Me.tableProductos.codigo_internoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarcasRow() As MarcasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Productos_Marcas")),MarcasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Productos_Marcas"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModelosRow() As ModelosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Productos_Modelos")),ModelosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Productos_Modelos"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RubrosRow() As RubrosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Productos_Rubros")),RubrosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Productos_Rubros"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TallesRow() As TallesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Productos_Talles")),TallesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Productos_Talles"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdetalleNull() As Boolean
            Return Me.IsNull(Me.tableProductos.detalleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdetalleNull()
            Me(Me.tableProductos.detalleColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProveedoresRow
        Inherits System.Data.DataRow
        
        Private tableProveedores As ProveedoresDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProveedores = CType(Me.Table,ProveedoresDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_proveedor() As Short
            Get
                Return CType(Me(Me.tableProveedores.codigo_proveedorColumn),Short)
            End Get
            Set
                Me(Me.tableProveedores.codigo_proveedorColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property nombre() As String
            Get
                Return CType(Me(Me.tableProveedores.nombreColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.nombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property apellido() As String
            Get
                Return CType(Me(Me.tableProveedores.apellidoColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.apellidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property direccion() As String
            Get
                Return CType(Me(Me.tableProveedores.direccionColumn),String)
            End Get
            Set
                Me(Me.tableProveedores.direccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero() As Short
            Get
                Return CType(Me(Me.tableProveedores.numeroColumn),Short)
            End Get
            Set
                Me(Me.tableProveedores.numeroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_postal() As Short
            Get
                Return CType(Me(Me.tableProveedores.codigo_postalColumn),Short)
            End Get
            Set
                Me(Me.tableProveedores.codigo_postalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableProveedores.telefonoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'telefono' de la tabla 'Proveedores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProveedores.telefonoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property celular() As String
            Get
                Try 
                    Return CType(Me(Me.tableProveedores.celularColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'celular' de la tabla 'Proveedores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProveedores.celularColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableProveedores.emailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'email' de la tabla 'Proveedores' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProveedores.emailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalidadesRow() As LocalidadesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Proveedores_Localidades")),LocalidadesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Proveedores_Localidades"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstelefonoNull() As Boolean
            Return Me.IsNull(Me.tableProveedores.telefonoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettelefonoNull()
            Me(Me.tableProveedores.telefonoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscelularNull() As Boolean
            Return Me.IsNull(Me.tableProveedores.celularColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcelularNull()
            Me(Me.tableProveedores.celularColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableProveedores.emailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetemailNull()
            Me(Me.tableProveedores.emailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetComprasRows() As ComprasRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Compras_Proveedores")),ComprasRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RubrosRow
        Inherits System.Data.DataRow
        
        Private tableRubros As RubrosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRubros = CType(Me.Table,RubrosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_rubro() As Byte
            Get
                Return CType(Me(Me.tableRubros.codigo_rubroColumn),Byte)
            End Get
            Set
                Me(Me.tableRubros.codigo_rubroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Return CType(Me(Me.tableRubros.descripcionColumn),String)
            End Get
            Set
                Me(Me.tableRubros.descripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductosRows() As ProductosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Productos_Rubros")),ProductosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TallesRow
        Inherits System.Data.DataRow
        
        Private tableTalles As TallesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTalles = CType(Me.Table,TallesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero_talle() As Byte
            Get
                Return CType(Me(Me.tableTalles.numero_talleColumn),Byte)
            End Get
            Set
                Me(Me.tableTalles.numero_talleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sigla() As String
            Get
                Return CType(Me(Me.tableTalles.siglaColumn),String)
            End Get
            Set
                Me(Me.tableTalles.siglaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProductosRows() As ProductosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Productos_Talles")),ProductosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TipoPagoRow
        Inherits System.Data.DataRow
        
        Private tableTipoPago As TipoPagoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTipoPago = CType(Me.Table,TipoPagoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_pago() As Byte
            Get
                Return CType(Me(Me.tableTipoPago.codigo_pagoColumn),Byte)
            End Get
            Set
                Me(Me.tableTipoPago.codigo_pagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Return CType(Me(Me.tableTipoPago.descripcionColumn),String)
            End Get
            Set
                Me(Me.tableTipoPago.descripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVentasRows() As VentasRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Ventas_TipoPago")),VentasRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VentasRow
        Inherits System.Data.DataRow
        
        Private tableVentas As VentasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVentas = CType(Me.Table,VentasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property numero_factura() As Integer
            Get
                Return CType(Me(Me.tableVentas.numero_facturaColumn),Integer)
            End Get
            Set
                Me(Me.tableVentas.numero_facturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_venta() As Date
            Get
                Return CType(Me(Me.tableVentas.fecha_ventaColumn),Date)
            End Get
            Set
                Me(Me.tableVentas.fecha_ventaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipo_pago() As Byte
            Get
                Return CType(Me(Me.tableVentas.tipo_pagoColumn),Byte)
            End Get
            Set
                Me(Me.tableVentas.tipo_pagoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property empresa() As Byte
            Get
                Return CType(Me(Me.tableVentas.empresaColumn),Byte)
            End Get
            Set
                Me(Me.tableVentas.empresaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cuotas() As Byte
            Get
                Return CType(Me(Me.tableVentas.cuotasColumn),Byte)
            End Get
            Set
                Me(Me.tableVentas.cuotasColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property codigo_cliente() As Short
            Get
                Return CType(Me(Me.tableVentas.codigo_clienteColumn),Short)
            End Get
            Set
                Me(Me.tableVentas.codigo_clienteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientesRow() As ClientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Ventas_Clientes")),ClientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Ventas_Clientes"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoPagoRow() As TipoPagoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Ventas_TipoPago")),TipoPagoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Ventas_TipoPago"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDetalleVentaRows() As DetalleVentaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DetalleVenta_Ventas")),DetalleVentaRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ClientesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComprasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ComprasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComprasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComprasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DetalleCompraRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DetalleCompraRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleCompraRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleCompraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DetalleVentaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DetalleVentaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleVentaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleVentaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LocalidadesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LocalidadesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LocalidadesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LocalidadesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MarcasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MarcasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MarcasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MarcasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ModelosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ModelosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ModelosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ModelosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProductosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProductosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProveedoresRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProveedoresRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProveedoresRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProveedoresRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RubrosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RubrosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RubrosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RubrosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TallesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TallesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TallesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TallesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TipoPagoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TipoPagoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TipoPagoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TipoPagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VentasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VentasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VentasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VentasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Local2DataSetTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClientesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Clientes"
            tableMapping.ColumnMappings.Add("codigo_cliente", "codigo_cliente")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("apellido", "apellido")
            tableMapping.ColumnMappings.Add("numero_documento", "numero_documento")
            tableMapping.ColumnMappings.Add("dirección", "dirección")
            tableMapping.ColumnMappings.Add("numero", "numero")
            tableMapping.ColumnMappings.Add("codigo_postal", "codigo_postal")
            tableMapping.ColumnMappings.Add("telefono", "telefono")
            tableMapping.ColumnMappings.Add("celular", "celular")
            tableMapping.ColumnMappings.Add("email", "email")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Clientes] WHERE (([codigo_cliente] = @Original_codigo_cliente)"& _ 
                " AND ([nombre] = @Original_nombre) AND ([apellido] = @Original_apellido) AND ([n"& _ 
                "umero_documento] = @Original_numero_documento) AND ([dirección] = @Original_dire"& _ 
                "cción) AND ([numero] = @Original_numero) AND ([codigo_postal] = @Original_codigo"& _ 
                "_postal) AND ((@IsNull_telefono = 1 AND [telefono] IS NULL) OR ([telefono] = @Or"& _ 
                "iginal_telefono)) AND ((@IsNull_celular = 1 AND [celular] IS NULL) OR ([celular]"& _ 
                " = @Original_celular)) AND ((@IsNull_email = 1 AND [email] IS NULL) OR ([email] "& _ 
                "= @Original_email)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_documento", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_documento", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_dirección", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dirección", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_telefono", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_celular", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_email", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Clientes] ([codigo_cliente], [nombre], [apellido], [numero_doc"& _ 
                "umento], [dirección], [numero], [codigo_postal], [telefono], [celular], [email])"& _ 
                " VALUES (@codigo_cliente, @nombre, @apellido, @numero_documento, @dirección, @nu"& _ 
                "mero, @codigo_postal, @telefono, @celular, @email);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_cliente, nomb"& _ 
                "re, apellido, numero_documento, dirección, numero, codigo_postal, telefono, celu"& _ 
                "lar, email FROM Clientes WHERE (codigo_cliente = @codigo_cliente)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_documento", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_documento", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@dirección", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dirección", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Clientes] SET [codigo_cliente] = @codigo_cliente, [nombre] = @nombr"& _ 
                "e, [apellido] = @apellido, [numero_documento] = @numero_documento, [dirección] ="& _ 
                " @dirección, [numero] = @numero, [codigo_postal] = @codigo_postal, [telefono] = "& _ 
                "@telefono, [celular] = @celular, [email] = @email WHERE (([codigo_cliente] = @Or"& _ 
                "iginal_codigo_cliente) AND ([nombre] = @Original_nombre) AND ([apellido] = @Orig"& _ 
                "inal_apellido) AND ([numero_documento] = @Original_numero_documento) AND ([direc"& _ 
                "ción] = @Original_dirección) AND ([numero] = @Original_numero) AND ([codigo_post"& _ 
                "al] = @Original_codigo_postal) AND ((@IsNull_telefono = 1 AND [telefono] IS NULL"& _ 
                ") OR ([telefono] = @Original_telefono)) AND ((@IsNull_celular = 1 AND [celular] "& _ 
                "IS NULL) OR ([celular] = @Original_celular)) AND ((@IsNull_email = 1 AND [email]"& _ 
                " IS NULL) OR ([email] = @Original_email)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_cliente, nombre, apel"& _ 
                "lido, numero_documento, dirección, numero, codigo_postal, telefono, celular, ema"& _ 
                "il FROM Clientes WHERE (codigo_cliente = @codigo_cliente)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_documento", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_documento", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@dirección", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dirección", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_documento", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_documento", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_dirección", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "dirección", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_telefono", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_celular", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_email", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_cliente, nombre, apellido, numero_documento, dirección, numero, cod"& _ 
                "igo_postal, telefono, celular, email FROM dbo.Clientes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.ClientesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.ClientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.ClientesDataTable = New Local2DataSet.ClientesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.ClientesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Clientes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_cliente As Short, ByVal Original_nombre As String, ByVal Original_apellido As String, ByVal Original_numero_documento As Integer, ByVal Original_dirección As String, ByVal Original_numero As Short, ByVal Original_codigo_postal As Short, ByVal Original_telefono As String, ByVal Original_celular As String, ByVal Original_email As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_cliente,Short)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre,String)
            End If
            If (Original_apellido Is Nothing) Then
                Throw New System.ArgumentNullException("Original_apellido")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_apellido,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_numero_documento,Integer)
            If (Original_dirección Is Nothing) Then
                Throw New System.ArgumentNullException("Original_dirección")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_dirección,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_numero,Short)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_codigo_postal,Short)
            If (Original_telefono Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_telefono,String)
            End If
            If (Original_celular Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_celular,String)
            End If
            If (Original_email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_email,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_cliente As Short, ByVal nombre As String, ByVal apellido As String, ByVal numero_documento As Integer, ByVal dirección As String, ByVal numero As Short, ByVal codigo_postal As Short, ByVal telefono As String, ByVal celular As String, ByVal email As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_cliente,Short)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            If (apellido Is Nothing) Then
                Throw New System.ArgumentNullException("apellido")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(apellido,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(numero_documento,Integer)
            If (dirección Is Nothing) Then
                Throw New System.ArgumentNullException("dirección")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(dirección,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(numero,Short)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(codigo_postal,Short)
            If (telefono Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(telefono,String)
            End If
            If (celular Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(celular,String)
            End If
            If (email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(email,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal codigo_cliente As Short,  _
                    ByVal nombre As String,  _
                    ByVal apellido As String,  _
                    ByVal numero_documento As Integer,  _
                    ByVal dirección As String,  _
                    ByVal numero As Short,  _
                    ByVal codigo_postal As Short,  _
                    ByVal telefono As String,  _
                    ByVal celular As String,  _
                    ByVal email As String,  _
                    ByVal Original_codigo_cliente As Short,  _
                    ByVal Original_nombre As String,  _
                    ByVal Original_apellido As String,  _
                    ByVal Original_numero_documento As Integer,  _
                    ByVal Original_dirección As String,  _
                    ByVal Original_numero As Short,  _
                    ByVal Original_codigo_postal As Short,  _
                    ByVal Original_telefono As String,  _
                    ByVal Original_celular As String,  _
                    ByVal Original_email As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_cliente,Short)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            If (apellido Is Nothing) Then
                Throw New System.ArgumentNullException("apellido")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(apellido,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(numero_documento,Integer)
            If (dirección Is Nothing) Then
                Throw New System.ArgumentNullException("dirección")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(dirección,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(numero,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(codigo_postal,Short)
            If (telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(telefono,String)
            End If
            If (celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(celular,String)
            End If
            If (email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(email,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_codigo_cliente,Short)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_nombre,String)
            End If
            If (Original_apellido Is Nothing) Then
                Throw New System.ArgumentNullException("Original_apellido")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_apellido,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_numero_documento,Integer)
            If (Original_dirección Is Nothing) Then
                Throw New System.ArgumentNullException("Original_dirección")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_dirección,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_numero,Short)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_codigo_postal,Short)
            If (Original_telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_telefono,String)
            End If
            If (Original_celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_celular,String)
            End If
            If (Original_email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_email,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ComprasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Compras"
            tableMapping.ColumnMappings.Add("numero_factura", "numero_factura")
            tableMapping.ColumnMappings.Add("codigo_proveedor", "codigo_proveedor")
            tableMapping.ColumnMappings.Add("fecha_compra", "fecha_compra")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Compras] WHERE (([numero_factura] = @Original_numero_factura) "& _ 
                "AND ([codigo_proveedor] = @Original_codigo_proveedor) AND ([fecha_compra] = @Ori"& _ 
                "ginal_fecha_compra))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_compra", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_compra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Compras] ([numero_factura], [codigo_proveedor], [fecha_compra]"& _ 
                ") VALUES (@numero_factura, @codigo_proveedor, @fecha_compra);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_fac"& _ 
                "tura, codigo_proveedor, fecha_compra FROM Compras WHERE (codigo_proveedor = @cod"& _ 
                "igo_proveedor) AND (numero_factura = @numero_factura)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_compra", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_compra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Compras] SET [numero_factura] = @numero_factura, [codigo_proveedor]"& _ 
                " = @codigo_proveedor, [fecha_compra] = @fecha_compra WHERE (([numero_factura] = "& _ 
                "@Original_numero_factura) AND ([codigo_proveedor] = @Original_codigo_proveedor) "& _ 
                "AND ([fecha_compra] = @Original_fecha_compra));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_factura, codigo_p"& _ 
                "roveedor, fecha_compra FROM Compras WHERE (codigo_proveedor = @codigo_proveedor)"& _ 
                " AND (numero_factura = @numero_factura)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_compra", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_compra", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_compra", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_compra", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT numero_factura, codigo_proveedor, fecha_compra FROM dbo.Compras"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.ComprasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.ComprasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.ComprasDataTable = New Local2DataSet.ComprasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.ComprasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Compras")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_numero_factura As Integer, ByVal Original_codigo_proveedor As Short, ByVal Original_fecha_compra As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_codigo_proveedor,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_fecha_compra,Date)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short, ByVal fecha_compra As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(codigo_proveedor,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(fecha_compra,Date)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short, ByVal fecha_compra As Date, ByVal Original_numero_factura As Integer, ByVal Original_codigo_proveedor As Short, ByVal Original_fecha_compra As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(codigo_proveedor,Short)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(fecha_compra,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_codigo_proveedor,Short)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_fecha_compra,Date)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DetalleCompraTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleCompra"
            tableMapping.ColumnMappings.Add("numero_factura", "numero_factura")
            tableMapping.ColumnMappings.Add("codigo_proveedor", "codigo_proveedor")
            tableMapping.ColumnMappings.Add("codigo_producto", "codigo_producto")
            tableMapping.ColumnMappings.Add("cantidad", "cantidad")
            tableMapping.ColumnMappings.Add("costo", "costo")
            tableMapping.ColumnMappings.Add("precio_unitario", "precio_unitario")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DetalleCompra] WHERE (([numero_factura] = @Original_numero_fac"& _ 
                "tura) AND ([codigo_proveedor] = @Original_codigo_proveedor) AND ([codigo_product"& _ 
                "o] = @Original_codigo_producto) AND ([cantidad] = @Original_cantidad) AND ([cost"& _ 
                "o] = @Original_costo) AND ([precio_unitario] = @Original_precio_unitario))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DetalleCompra] ([numero_factura], [codigo_proveedor], [codigo_"& _ 
                "producto], [cantidad], [costo], [precio_unitario]) VALUES (@numero_factura, @cod"& _ 
                "igo_proveedor, @codigo_producto, @cantidad, @costo, @precio_unitario);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT n"& _ 
                "umero_factura, codigo_proveedor, codigo_producto, cantidad, costo, precio_unitar"& _ 
                "io FROM DetalleCompra WHERE (codigo_producto = @codigo_producto) AND (codigo_pro"& _ 
                "veedor = @codigo_proveedor) AND (numero_factura = @numero_factura)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DetalleCompra] SET [numero_factura] = @numero_factura, [codigo_prov"& _ 
                "eedor] = @codigo_proveedor, [codigo_producto] = @codigo_producto, [cantidad] = @"& _ 
                "cantidad, [costo] = @costo, [precio_unitario] = @precio_unitario WHERE (([numero"& _ 
                "_factura] = @Original_numero_factura) AND ([codigo_proveedor] = @Original_codigo"& _ 
                "_proveedor) AND ([codigo_producto] = @Original_codigo_producto) AND ([cantidad] "& _ 
                "= @Original_cantidad) AND ([costo] = @Original_costo) AND ([precio_unitario] = @"& _ 
                "Original_precio_unitario));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_factura, codigo_proveedor, codigo_pro"& _ 
                "ducto, cantidad, costo, precio_unitario FROM DetalleCompra WHERE (codigo_product"& _ 
                "o = @codigo_producto) AND (codigo_proveedor = @codigo_proveedor) AND (numero_fac"& _ 
                "tura = @numero_factura)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT numero_factura, codigo_proveedor, codigo_producto, cantidad, costo, precio"& _ 
                "_unitario FROM dbo.DetalleCompra"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.DetalleCompraDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.DetalleCompraDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.DetalleCompraDataTable = New Local2DataSet.DetalleCompraDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.DetalleCompraDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleCompra")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_numero_factura As Integer, ByVal Original_codigo_proveedor As Short, ByVal Original_codigo_producto As Short, ByVal Original_cantidad As Byte, ByVal Original_costo As Decimal, ByVal Original_precio_unitario As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_codigo_proveedor,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_codigo_producto,Short)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_cantidad,Byte)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_costo,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_precio_unitario,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short, ByVal codigo_producto As Short, ByVal cantidad As Byte, ByVal costo As Decimal, ByVal precio_unitario As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(codigo_proveedor,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(codigo_producto,Short)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cantidad,Byte)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(costo,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(precio_unitario,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal numero_factura As Integer, ByVal codigo_proveedor As Short, ByVal codigo_producto As Short, ByVal cantidad As Byte, ByVal costo As Decimal, ByVal precio_unitario As Decimal, ByVal Original_numero_factura As Integer, ByVal Original_codigo_proveedor As Short, ByVal Original_codigo_producto As Short, ByVal Original_cantidad As Byte, ByVal Original_costo As Decimal, ByVal Original_precio_unitario As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(codigo_proveedor,Short)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(codigo_producto,Short)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cantidad,Byte)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(costo,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(precio_unitario,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_codigo_proveedor,Short)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_codigo_producto,Short)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_cantidad,Byte)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_costo,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_precio_unitario,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DetalleVentaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleVenta"
            tableMapping.ColumnMappings.Add("numero_factura", "numero_factura")
            tableMapping.ColumnMappings.Add("codigo_producto", "codigo_producto")
            tableMapping.ColumnMappings.Add("cantidad", "cantidad")
            tableMapping.ColumnMappings.Add("costo", "costo")
            tableMapping.ColumnMappings.Add("precio_venta", "precio_venta")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DetalleVenta] WHERE (([numero_factura] = @Original_numero_fact"& _ 
                "ura) AND ([codigo_producto] = @Original_codigo_producto) AND ([cantidad] = @Orig"& _ 
                "inal_cantidad) AND ([costo] = @Original_costo) AND ([precio_venta] = @Original_p"& _ 
                "recio_venta))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_precio_venta", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_venta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DetalleVenta] ([numero_factura], [codigo_producto], [cantidad]"& _ 
                ", [costo], [precio_venta]) VALUES (@numero_factura, @codigo_producto, @cantidad,"& _ 
                " @costo, @precio_venta);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_factura, codigo_producto, cantidad, cost"& _ 
                "o, precio_venta FROM DetalleVenta WHERE (codigo_producto = @codigo_producto) AND"& _ 
                " (numero_factura = @numero_factura)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@precio_venta", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_venta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DetalleVenta] SET [numero_factura] = @numero_factura, [codigo_produ"& _ 
                "cto] = @codigo_producto, [cantidad] = @cantidad, [costo] = @costo, [precio_venta"& _ 
                "] = @precio_venta WHERE (([numero_factura] = @Original_numero_factura) AND ([cod"& _ 
                "igo_producto] = @Original_codigo_producto) AND ([cantidad] = @Original_cantidad)"& _ 
                " AND ([costo] = @Original_costo) AND ([precio_venta] = @Original_precio_venta));"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_factura, codigo_producto, cantidad, costo, precio_venta FROM Det"& _ 
                "alleVenta WHERE (codigo_producto = @codigo_producto) AND (numero_factura = @nume"& _ 
                "ro_factura)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@precio_venta", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_venta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_producto", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_producto", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cantidad", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cantidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_precio_venta", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_venta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT numero_factura, codigo_producto, cantidad, costo, precio_venta FROM dbo.De"& _ 
                "talleVenta"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.DetalleVentaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.DetalleVentaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.DetalleVentaDataTable = New Local2DataSet.DetalleVentaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.DetalleVentaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleVenta")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_numero_factura As Integer, ByVal Original_codigo_producto As Short, ByVal Original_cantidad As Byte, ByVal Original_costo As Decimal, ByVal Original_precio_venta As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_codigo_producto,Short)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_cantidad,Byte)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_costo,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_precio_venta,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal numero_factura As Integer, ByVal codigo_producto As Short, ByVal cantidad As Byte, ByVal costo As Decimal, ByVal precio_venta As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(codigo_producto,Short)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(cantidad,Byte)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(costo,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(precio_venta,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal numero_factura As Integer, ByVal codigo_producto As Short, ByVal cantidad As Byte, ByVal costo As Decimal, ByVal precio_venta As Decimal, ByVal Original_numero_factura As Integer, ByVal Original_codigo_producto As Short, ByVal Original_cantidad As Byte, ByVal Original_costo As Decimal, ByVal Original_precio_venta As Decimal) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(codigo_producto,Short)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cantidad,Byte)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(costo,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(precio_venta,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_codigo_producto,Short)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_cantidad,Byte)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_costo,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_precio_venta,Decimal)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LocalidadesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Localidades"
            tableMapping.ColumnMappings.Add("codigo_postal", "codigo_postal")
            tableMapping.ColumnMappings.Add("localidad", "localidad")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Localidades] WHERE (([codigo_postal] = @Original_codigo_postal"& _ 
                ") AND ([localidad] = @Original_localidad))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_localidad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "localidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Localidades] ([codigo_postal], [localidad]) VALUES (@codigo_po"& _ 
                "stal, @localidad);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_postal, localidad FROM Localidades WHERE (codi"& _ 
                "go_postal = @codigo_postal)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@localidad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "localidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Localidades] SET [codigo_postal] = @codigo_postal, [localidad] = @l"& _ 
                "ocalidad WHERE (([codigo_postal] = @Original_codigo_postal) AND ([localidad] = @"& _ 
                "Original_localidad));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_postal, localidad FROM Localidades WHERE (c"& _ 
                "odigo_postal = @codigo_postal)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@localidad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "localidad", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_localidad", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "localidad", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_postal, localidad FROM dbo.Localidades"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.LocalidadesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.LocalidadesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.LocalidadesDataTable = New Local2DataSet.LocalidadesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.LocalidadesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Localidades")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_postal As Short, ByVal Original_localidad As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_postal,Short)
            If (Original_localidad Is Nothing) Then
                Throw New System.ArgumentNullException("Original_localidad")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_localidad,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_postal As Short, ByVal localidad As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_postal,Short)
            If (localidad Is Nothing) Then
                Throw New System.ArgumentNullException("localidad")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(localidad,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal codigo_postal As Short, ByVal localidad As String, ByVal Original_codigo_postal As Short, ByVal Original_localidad As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_postal,Short)
            If (localidad Is Nothing) Then
                Throw New System.ArgumentNullException("localidad")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(localidad,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_codigo_postal,Short)
            If (Original_localidad Is Nothing) Then
                Throw New System.ArgumentNullException("Original_localidad")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_localidad,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MarcasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Marcas"
            tableMapping.ColumnMappings.Add("codigo_marca", "codigo_marca")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Marcas] WHERE (([codigo_marca] = @Original_codigo_marca) AND ("& _ 
                "[descripcion] = @Original_descripcion))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_marca", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Marcas] ([codigo_marca], [descripcion]) VALUES (@codigo_marca,"& _ 
                " @descripcion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_marca, descripcion FROM Marcas WHERE (codigo_marc"& _ 
                "a = @codigo_marca)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_marca", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Marcas] SET [codigo_marca] = @codigo_marca, [descripcion] = @descri"& _ 
                "pcion WHERE (([codigo_marca] = @Original_codigo_marca) AND ([descripcion] = @Ori"& _ 
                "ginal_descripcion));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_marca, descripcion FROM Marcas WHERE (codigo"& _ 
                "_marca = @codigo_marca)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_marca", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_marca", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_marca, descripcion FROM dbo.Marcas"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.MarcasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.MarcasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.MarcasDataTable = New Local2DataSet.MarcasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.MarcasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Marcas")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_marca As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_marca,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_marca As Byte, ByVal descripcion As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_marca,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal codigo_marca As Byte, ByVal descripcion As String, ByVal Original_codigo_marca As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_marca,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_codigo_marca,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ModelosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Modelos"
            tableMapping.ColumnMappings.Add("codigo_modelo", "codigo_modelo")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Modelos] WHERE (([codigo_modelo] = @Original_codigo_modelo) AN"& _ 
                "D ([descripcion] = @Original_descripcion))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Modelos] ([codigo_modelo], [descripcion]) VALUES (@codigo_mode"& _ 
                "lo, @descripcion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_modelo, descripcion FROM Modelos WHERE (codigo"& _ 
                "_modelo = @codigo_modelo)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Modelos] SET [codigo_modelo] = @codigo_modelo, [descripcion] = @des"& _ 
                "cripcion WHERE (([codigo_modelo] = @Original_codigo_modelo) AND ([descripcion] ="& _ 
                " @Original_descripcion));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_modelo, descripcion FROM Modelos WHERE "& _ 
                "(codigo_modelo = @codigo_modelo)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_modelo, descripcion FROM dbo.Modelos"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.ModelosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.ModelosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.ModelosDataTable = New Local2DataSet.ModelosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.ModelosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Modelos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_modelo As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_modelo,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_modelo As Byte, ByVal descripcion As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_modelo,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal codigo_modelo As Byte, ByVal descripcion As String, ByVal Original_codigo_modelo As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_modelo,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_codigo_modelo,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProductosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Productos"
            tableMapping.ColumnMappings.Add("codigo_anio", "codigo_anio")
            tableMapping.ColumnMappings.Add("codigo_rubro", "codigo_rubro")
            tableMapping.ColumnMappings.Add("codigo_modelo", "codigo_modelo")
            tableMapping.ColumnMappings.Add("talle", "talle")
            tableMapping.ColumnMappings.Add("detalle", "detalle")
            tableMapping.ColumnMappings.Add("marca", "marca")
            tableMapping.ColumnMappings.Add("costo", "costo")
            tableMapping.ColumnMappings.Add("precio_unitario", "precio_unitario")
            tableMapping.ColumnMappings.Add("stock_actual", "stock_actual")
            tableMapping.ColumnMappings.Add("stock_minimo", "stock_minimo")
            tableMapping.ColumnMappings.Add("codigo_interno", "codigo_interno")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Productos] WHERE (([codigo_anio] = @Original_codigo_anio) AND "& _ 
                "([codigo_rubro] = @Original_codigo_rubro) AND ([codigo_modelo] = @Original_codig"& _ 
                "o_modelo) AND ([talle] = @Original_talle) AND ((@IsNull_detalle = 1 AND [detalle"& _ 
                "] IS NULL) OR ([detalle] = @Original_detalle)) AND ([marca] = @Original_marca) A"& _ 
                "ND ([costo] = @Original_costo) AND ([precio_unitario] = @Original_precio_unitari"& _ 
                "o) AND ([stock_actual] = @Original_stock_actual) AND ([stock_minimo] = @Original"& _ 
                "_stock_minimo) AND ([codigo_interno] = @Original_codigo_interno))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_anio", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_anio", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "talle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_detalle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "detalle", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_detalle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "detalle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "marca", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_stock_actual", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_actual", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_stock_minimo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_minimo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_interno", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_interno", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Productos] ([codigo_anio], [codigo_rubro], [codigo_modelo], [t"& _ 
                "alle], [detalle], [marca], [costo], [precio_unitario], [stock_actual], [stock_mi"& _ 
                "nimo], [codigo_interno]) VALUES (@codigo_anio, @codigo_rubro, @codigo_modelo, @t"& _ 
                "alle, @detalle, @marca, @costo, @precio_unitario, @stock_actual, @stock_minimo, "& _ 
                "@codigo_interno);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_anio, codigo_rubro, codigo_modelo, talle, detal"& _ 
                "le, marca, costo, precio_unitario, stock_actual, stock_minimo, codigo_interno FR"& _ 
                "OM Productos WHERE (codigo_anio = @codigo_anio) AND (codigo_modelo = @codigo_mod"& _ 
                "elo) AND (codigo_rubro = @codigo_rubro) AND (talle = @talle)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_anio", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_anio", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "talle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@detalle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "detalle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "marca", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@stock_actual", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_actual", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@stock_minimo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_minimo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_interno", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_interno", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Productos] SET [codigo_anio] = @codigo_anio, [codigo_rubro] = @codi"& _ 
                "go_rubro, [codigo_modelo] = @codigo_modelo, [talle] = @talle, [detalle] = @detal"& _ 
                "le, [marca] = @marca, [costo] = @costo, [precio_unitario] = @precio_unitario, [s"& _ 
                "tock_actual] = @stock_actual, [stock_minimo] = @stock_minimo, [codigo_interno] ="& _ 
                " @codigo_interno WHERE (([codigo_anio] = @Original_codigo_anio) AND ([codigo_rub"& _ 
                "ro] = @Original_codigo_rubro) AND ([codigo_modelo] = @Original_codigo_modelo) AN"& _ 
                "D ([talle] = @Original_talle) AND ((@IsNull_detalle = 1 AND [detalle] IS NULL) O"& _ 
                "R ([detalle] = @Original_detalle)) AND ([marca] = @Original_marca) AND ([costo] "& _ 
                "= @Original_costo) AND ([precio_unitario] = @Original_precio_unitario) AND ([sto"& _ 
                "ck_actual] = @Original_stock_actual) AND ([stock_minimo] = @Original_stock_minim"& _ 
                "o) AND ([codigo_interno] = @Original_codigo_interno));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_anio, codi"& _ 
                "go_rubro, codigo_modelo, talle, detalle, marca, costo, precio_unitario, stock_ac"& _ 
                "tual, stock_minimo, codigo_interno FROM Productos WHERE (codigo_anio = @codigo_a"& _ 
                "nio) AND (codigo_modelo = @codigo_modelo) AND (codigo_rubro = @codigo_rubro) AND"& _ 
                " (talle = @talle)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_anio", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_anio", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "talle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@detalle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "detalle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "marca", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@stock_actual", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_actual", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@stock_minimo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_minimo", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_interno", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_interno", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_anio", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_anio", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_modelo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_modelo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "talle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_detalle", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "detalle", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_detalle", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "detalle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_marca", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "marca", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_costo", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "costo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_precio_unitario", System.Data.SqlDbType.[Decimal], 0, System.Data.ParameterDirection.Input, 3, 2, "precio_unitario", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_stock_actual", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_actual", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_stock_minimo", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "stock_minimo", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_interno", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_interno", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_anio, codigo_rubro, codigo_modelo, talle, detalle, marca, costo, pr"& _ 
                "ecio_unitario, stock_actual, stock_minimo, codigo_interno FROM dbo.Productos"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.ProductosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.ProductosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.ProductosDataTable = New Local2DataSet.ProductosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.ProductosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Productos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_anio As Byte, ByVal Original_codigo_rubro As Byte, ByVal Original_codigo_modelo As Byte, ByVal Original_talle As Byte, ByVal Original_detalle As String, ByVal Original_marca As Byte, ByVal Original_costo As Decimal, ByVal Original_precio_unitario As Decimal, ByVal Original_stock_actual As Byte, ByVal Original_stock_minimo As Byte, ByVal Original_codigo_interno As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_anio,Byte)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_codigo_rubro,Byte)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_codigo_modelo,Byte)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_talle,Byte)
            If (Original_detalle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_detalle,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_marca,Byte)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_costo,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_precio_unitario,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_stock_actual,Byte)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_stock_minimo,Byte)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_codigo_interno,Short)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_anio As Byte, ByVal codigo_rubro As Byte, ByVal codigo_modelo As Byte, ByVal talle As Byte, ByVal detalle As String, ByVal marca As Byte, ByVal costo As Decimal, ByVal precio_unitario As Decimal, ByVal stock_actual As Byte, ByVal stock_minimo As Byte, ByVal codigo_interno As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_anio,Byte)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(codigo_rubro,Byte)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(codigo_modelo,Byte)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(talle,Byte)
            If (detalle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(detalle,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(marca,Byte)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(costo,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(precio_unitario,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(stock_actual,Byte)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(stock_minimo,Byte)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(codigo_interno,Short)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal codigo_anio As Byte,  _
                    ByVal codigo_rubro As Byte,  _
                    ByVal codigo_modelo As Byte,  _
                    ByVal talle As Byte,  _
                    ByVal detalle As String,  _
                    ByVal marca As Byte,  _
                    ByVal costo As Decimal,  _
                    ByVal precio_unitario As Decimal,  _
                    ByVal stock_actual As Byte,  _
                    ByVal stock_minimo As Byte,  _
                    ByVal codigo_interno As Short,  _
                    ByVal Original_codigo_anio As Byte,  _
                    ByVal Original_codigo_rubro As Byte,  _
                    ByVal Original_codigo_modelo As Byte,  _
                    ByVal Original_talle As Byte,  _
                    ByVal Original_detalle As String,  _
                    ByVal Original_marca As Byte,  _
                    ByVal Original_costo As Decimal,  _
                    ByVal Original_precio_unitario As Decimal,  _
                    ByVal Original_stock_actual As Byte,  _
                    ByVal Original_stock_minimo As Byte,  _
                    ByVal Original_codigo_interno As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_anio,Byte)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(codigo_rubro,Byte)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(codigo_modelo,Byte)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(talle,Byte)
            If (detalle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(detalle,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(marca,Byte)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(costo,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(precio_unitario,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(stock_actual,Byte)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(stock_minimo,Byte)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(codigo_interno,Short)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_codigo_anio,Byte)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_codigo_rubro,Byte)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_codigo_modelo,Byte)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_talle,Byte)
            If (Original_detalle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_detalle,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_marca,Byte)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_costo,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_precio_unitario,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_stock_actual,Byte)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_stock_minimo,Byte)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_codigo_interno,Short)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProveedoresTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Proveedores"
            tableMapping.ColumnMappings.Add("codigo_proveedor", "codigo_proveedor")
            tableMapping.ColumnMappings.Add("nombre", "nombre")
            tableMapping.ColumnMappings.Add("apellido", "apellido")
            tableMapping.ColumnMappings.Add("direccion", "direccion")
            tableMapping.ColumnMappings.Add("numero", "numero")
            tableMapping.ColumnMappings.Add("codigo_postal", "codigo_postal")
            tableMapping.ColumnMappings.Add("telefono", "telefono")
            tableMapping.ColumnMappings.Add("celular", "celular")
            tableMapping.ColumnMappings.Add("email", "email")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Proveedores] WHERE (([codigo_proveedor] = @Original_codigo_pro"& _ 
                "veedor) AND ([nombre] = @Original_nombre) AND ([apellido] = @Original_apellido) "& _ 
                "AND ([direccion] = @Original_direccion) AND ([numero] = @Original_numero) AND (["& _ 
                "codigo_postal] = @Original_codigo_postal) AND ((@IsNull_telefono = 1 AND [telefo"& _ 
                "no] IS NULL) OR ([telefono] = @Original_telefono)) AND ((@IsNull_celular = 1 AND"& _ 
                " [celular] IS NULL) OR ([celular] = @Original_celular)) AND ((@IsNull_email = 1 "& _ 
                "AND [email] IS NULL) OR ([email] = @Original_email)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_direccion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "direccion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_telefono", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_celular", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_email", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Proveedores] ([codigo_proveedor], [nombre], [apellido], [direc"& _ 
                "cion], [numero], [codigo_postal], [telefono], [celular], [email]) VALUES (@codig"& _ 
                "o_proveedor, @nombre, @apellido, @direccion, @numero, @codigo_postal, @telefono,"& _ 
                " @celular, @email);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_proveedor, nombre, apellido, direccion, numer"& _ 
                "o, codigo_postal, telefono, celular, email FROM Proveedores WHERE (codigo_provee"& _ 
                "dor = @codigo_proveedor)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@direccion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "direccion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Proveedores] SET [codigo_proveedor] = @codigo_proveedor, [nombre] ="& _ 
                " @nombre, [apellido] = @apellido, [direccion] = @direccion, [numero] = @numero, "& _ 
                "[codigo_postal] = @codigo_postal, [telefono] = @telefono, [celular] = @celular, "& _ 
                "[email] = @email WHERE (([codigo_proveedor] = @Original_codigo_proveedor) AND (["& _ 
                "nombre] = @Original_nombre) AND ([apellido] = @Original_apellido) AND ([direccio"& _ 
                "n] = @Original_direccion) AND ([numero] = @Original_numero) AND ([codigo_postal]"& _ 
                " = @Original_codigo_postal) AND ((@IsNull_telefono = 1 AND [telefono] IS NULL) O"& _ 
                "R ([telefono] = @Original_telefono)) AND ((@IsNull_celular = 1 AND [celular] IS "& _ 
                "NULL) OR ([celular] = @Original_celular)) AND ((@IsNull_email = 1 AND [email] IS"& _ 
                " NULL) OR ([email] = @Original_email)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_proveedor, nombre, apell"& _ 
                "ido, direccion, numero, codigo_postal, telefono, celular, email FROM Proveedores"& _ 
                " WHERE (codigo_proveedor = @codigo_proveedor)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@direccion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "direccion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_proveedor", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_proveedor", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_nombre", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "nombre", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_apellido", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "apellido", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_direccion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "direccion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_postal", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_postal", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_telefono", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_telefono", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "telefono", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_celular", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_celular", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "celular", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@IsNull_email", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_email", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "email", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_proveedor, nombre, apellido, direccion, numero, codigo_postal, tele"& _ 
                "fono, celular, email FROM dbo.Proveedores"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.ProveedoresDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.ProveedoresDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.ProveedoresDataTable = New Local2DataSet.ProveedoresDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.ProveedoresDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Proveedores")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_proveedor As Short, ByVal Original_nombre As String, ByVal Original_apellido As String, ByVal Original_direccion As String, ByVal Original_numero As Short, ByVal Original_codigo_postal As Short, ByVal Original_telefono As String, ByVal Original_celular As String, ByVal Original_email As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_proveedor,Short)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_nombre,String)
            End If
            If (Original_apellido Is Nothing) Then
                Throw New System.ArgumentNullException("Original_apellido")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_apellido,String)
            End If
            If (Original_direccion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_direccion")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_direccion,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_numero,Short)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_codigo_postal,Short)
            If (Original_telefono Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_telefono,String)
            End If
            If (Original_celular Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_celular,String)
            End If
            If (Original_email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_email,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_proveedor As Short, ByVal nombre As String, ByVal apellido As String, ByVal direccion As String, ByVal numero As Short, ByVal codigo_postal As Short, ByVal telefono As String, ByVal celular As String, ByVal email As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_proveedor,Short)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(nombre,String)
            End If
            If (apellido Is Nothing) Then
                Throw New System.ArgumentNullException("apellido")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(apellido,String)
            End If
            If (direccion Is Nothing) Then
                Throw New System.ArgumentNullException("direccion")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(direccion,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(numero,Short)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(codigo_postal,Short)
            If (telefono Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(telefono,String)
            End If
            If (celular Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(celular,String)
            End If
            If (email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(email,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal codigo_proveedor As Short,  _
                    ByVal nombre As String,  _
                    ByVal apellido As String,  _
                    ByVal direccion As String,  _
                    ByVal numero As Short,  _
                    ByVal codigo_postal As Short,  _
                    ByVal telefono As String,  _
                    ByVal celular As String,  _
                    ByVal email As String,  _
                    ByVal Original_codigo_proveedor As Short,  _
                    ByVal Original_nombre As String,  _
                    ByVal Original_apellido As String,  _
                    ByVal Original_direccion As String,  _
                    ByVal Original_numero As Short,  _
                    ByVal Original_codigo_postal As Short,  _
                    ByVal Original_telefono As String,  _
                    ByVal Original_celular As String,  _
                    ByVal Original_email As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_proveedor,Short)
            If (nombre Is Nothing) Then
                Throw New System.ArgumentNullException("nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(nombre,String)
            End If
            If (apellido Is Nothing) Then
                Throw New System.ArgumentNullException("apellido")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(apellido,String)
            End If
            If (direccion Is Nothing) Then
                Throw New System.ArgumentNullException("direccion")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(direccion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(numero,Short)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(codigo_postal,Short)
            If (telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(telefono,String)
            End If
            If (celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(celular,String)
            End If
            If (email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(email,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_codigo_proveedor,Short)
            If (Original_nombre Is Nothing) Then
                Throw New System.ArgumentNullException("Original_nombre")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_nombre,String)
            End If
            If (Original_apellido Is Nothing) Then
                Throw New System.ArgumentNullException("Original_apellido")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_apellido,String)
            End If
            If (Original_direccion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_direccion")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_direccion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_numero,Short)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_codigo_postal,Short)
            If (Original_telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_telefono,String)
            End If
            If (Original_celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_celular,String)
            End If
            If (Original_email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_email,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RubrosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Rubros"
            tableMapping.ColumnMappings.Add("codigo_rubro", "codigo_rubro")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Rubros] WHERE (([codigo_rubro] = @Original_codigo_rubro) AND ("& _ 
                "[descripcion] = @Original_descripcion))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Rubros] ([codigo_rubro], [descripcion]) VALUES (@codigo_rubro,"& _ 
                " @descripcion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_rubro, descripcion FROM Rubros WHERE (codigo_rubr"& _ 
                "o = @codigo_rubro)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Rubros] SET [codigo_rubro] = @codigo_rubro, [descripcion] = @descri"& _ 
                "pcion WHERE (([codigo_rubro] = @Original_codigo_rubro) AND ([descripcion] = @Ori"& _ 
                "ginal_descripcion));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_rubro, descripcion FROM Rubros WHERE (codigo"& _ 
                "_rubro = @codigo_rubro)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_rubro", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_rubro", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_rubro, descripcion FROM dbo.Rubros"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.RubrosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.RubrosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.RubrosDataTable = New Local2DataSet.RubrosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.RubrosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Rubros")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_rubro As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_rubro,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_rubro As Byte, ByVal descripcion As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_rubro,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal codigo_rubro As Byte, ByVal descripcion As String, ByVal Original_codigo_rubro As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_rubro,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_codigo_rubro,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TallesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Talles"
            tableMapping.ColumnMappings.Add("numero_talle", "numero_talle")
            tableMapping.ColumnMappings.Add("sigla", "sigla")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Talles] WHERE (([numero_talle] = @Original_numero_talle) AND ("& _ 
                "[sigla] = @Original_sigla))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_talle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sigla", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sigla", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Talles] ([numero_talle], [sigla]) VALUES (@numero_talle, @sigl"& _ 
                "a);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_talle, sigla FROM Talles WHERE (numero_talle = @numero_talle)"& _ 
                ""
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_talle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sigla", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sigla", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Talles] SET [numero_talle] = @numero_talle, [sigla] = @sigla WHERE "& _ 
                "(([numero_talle] = @Original_numero_talle) AND ([sigla] = @Original_sigla));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT numero_talle, sigla FROM Talles WHERE (numero_talle = @numero_talle)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_talle", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@sigla", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sigla", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_talle", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_talle", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_sigla", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "sigla", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT numero_talle, sigla FROM dbo.Talles"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.TallesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.TallesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.TallesDataTable = New Local2DataSet.TallesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.TallesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Talles")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_numero_talle As Byte, ByVal Original_sigla As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_numero_talle,Byte)
            If (Original_sigla Is Nothing) Then
                Throw New System.ArgumentNullException("Original_sigla")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sigla,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal numero_talle As Byte, ByVal sigla As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(numero_talle,Byte)
            If (sigla Is Nothing) Then
                Throw New System.ArgumentNullException("sigla")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sigla,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal numero_talle As Byte, ByVal sigla As String, ByVal Original_numero_talle As Byte, ByVal Original_sigla As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(numero_talle,Byte)
            If (sigla Is Nothing) Then
                Throw New System.ArgumentNullException("sigla")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sigla,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_numero_talle,Byte)
            If (Original_sigla Is Nothing) Then
                Throw New System.ArgumentNullException("Original_sigla")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_sigla,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TipoPagoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TipoPago"
            tableMapping.ColumnMappings.Add("codigo_pago", "codigo_pago")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TipoPago] WHERE (([codigo_pago] = @Original_codigo_pago) AND ("& _ 
                "[descripcion] = @Original_descripcion))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_pago", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TipoPago] ([codigo_pago], [descripcion]) VALUES (@codigo_pago,"& _ 
                " @descripcion);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_pago, descripcion FROM TipoPago WHERE (codigo_pag"& _ 
                "o = @codigo_pago)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_pago", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TipoPago] SET [codigo_pago] = @codigo_pago, [descripcion] = @descri"& _ 
                "pcion WHERE (([codigo_pago] = @Original_codigo_pago) AND ([descripcion] = @Origi"& _ 
                "nal_descripcion));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT codigo_pago, descripcion FROM TipoPago WHERE (codigo_"& _ 
                "pago = @codigo_pago)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_pago", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_pago", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_descripcion", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "descripcion", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT codigo_pago, descripcion FROM dbo.TipoPago"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.TipoPagoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.TipoPagoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.TipoPagoDataTable = New Local2DataSet.TipoPagoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.TipoPagoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TipoPago")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_codigo_pago As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_codigo_pago,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal codigo_pago As Byte, ByVal descripcion As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(codigo_pago,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal codigo_pago As Byte, ByVal descripcion As String, ByVal Original_codigo_pago As Byte, ByVal Original_descripcion As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(codigo_pago,Byte)
            If (descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(descripcion,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_codigo_pago,Byte)
            If (Original_descripcion Is Nothing) Then
                Throw New System.ArgumentNullException("Original_descripcion")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class VentasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Ventas"
            tableMapping.ColumnMappings.Add("numero_factura", "numero_factura")
            tableMapping.ColumnMappings.Add("fecha_venta", "fecha_venta")
            tableMapping.ColumnMappings.Add("tipo_pago", "tipo_pago")
            tableMapping.ColumnMappings.Add("empresa", "empresa")
            tableMapping.ColumnMappings.Add("cuotas", "cuotas")
            tableMapping.ColumnMappings.Add("codigo_cliente", "codigo_cliente")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Ventas] WHERE (([numero_factura] = @Original_numero_factura) A"& _ 
                "ND ([fecha_venta] = @Original_fecha_venta) AND ([tipo_pago] = @Original_tipo_pag"& _ 
                "o) AND ([empresa] = @Original_empresa) AND ([cuotas] = @Original_cuotas) AND ([c"& _ 
                "odigo_cliente] = @Original_codigo_cliente))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_venta", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_venta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_tipo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "tipo_pago", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_empresa", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "empresa", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cuotas", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cuotas", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Ventas] ([numero_factura], [fecha_venta], [tipo_pago], [empres"& _ 
                "a], [cuotas], [codigo_cliente]) VALUES (@numero_factura, @fecha_venta, @tipo_pag"& _ 
                "o, @empresa, @cuotas, @codigo_cliente);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_factura, fecha_venta, tip"& _ 
                "o_pago, empresa, cuotas, codigo_cliente FROM Ventas WHERE (numero_factura = @num"& _ 
                "ero_factura)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_venta", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_venta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tipo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "tipo_pago", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@empresa", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "empresa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cuotas", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cuotas", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Ventas] SET [numero_factura] = @numero_factura, [fecha_venta] = @fe"& _ 
                "cha_venta, [tipo_pago] = @tipo_pago, [empresa] = @empresa, [cuotas] = @cuotas, ["& _ 
                "codigo_cliente] = @codigo_cliente WHERE (([numero_factura] = @Original_numero_fa"& _ 
                "ctura) AND ([fecha_venta] = @Original_fecha_venta) AND ([tipo_pago] = @Original_"& _ 
                "tipo_pago) AND ([empresa] = @Original_empresa) AND ([cuotas] = @Original_cuotas)"& _ 
                " AND ([codigo_cliente] = @Original_codigo_cliente));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT numero_factura, fec"& _ 
                "ha_venta, tipo_pago, empresa, cuotas, codigo_cliente FROM Ventas WHERE (numero_f"& _ 
                "actura = @numero_factura)"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@fecha_venta", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_venta", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@tipo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "tipo_pago", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@empresa", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "empresa", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@cuotas", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cuotas", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_numero_factura", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "numero_factura", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_fecha_venta", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "fecha_venta", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_tipo_pago", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "tipo_pago", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_empresa", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "empresa", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_cuotas", System.Data.SqlDbType.TinyInt, 0, System.Data.ParameterDirection.Input, 0, 0, "cuotas", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.SqlClient.SqlParameter("@Original_codigo_cliente", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "codigo_cliente", System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Local.My.MySettings.Default.Local2ConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT numero_factura, fecha_venta, tipo_pago, empresa, cuotas, codigo_cliente FR"& _ 
                "OM dbo.Ventas"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Local2DataSet.VentasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Local2DataSet.VentasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Local2DataSet.VentasDataTable = New Local2DataSet.VentasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Local2DataSet.VentasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Local2DataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Ventas")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_numero_factura As Integer, ByVal Original_fecha_venta As Date, ByVal Original_tipo_pago As Byte, ByVal Original_empresa As Byte, ByVal Original_cuotas As Byte, ByVal Original_codigo_cliente As Short) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_fecha_venta,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tipo_pago,Byte)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_empresa,Byte)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_cuotas,Byte)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_codigo_cliente,Short)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal numero_factura As Integer, ByVal fecha_venta As Date, ByVal tipo_pago As Byte, ByVal empresa As Byte, ByVal cuotas As Byte, ByVal codigo_cliente As Short) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(fecha_venta,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(tipo_pago,Byte)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(empresa,Byte)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(cuotas,Byte)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(codigo_cliente,Short)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal numero_factura As Integer, ByVal fecha_venta As Date, ByVal tipo_pago As Byte, ByVal empresa As Byte, ByVal cuotas As Byte, ByVal codigo_cliente As Short, ByVal Original_numero_factura As Integer, ByVal Original_fecha_venta As Date, ByVal Original_tipo_pago As Byte, ByVal Original_empresa As Byte, ByVal Original_cuotas As Byte, ByVal Original_codigo_cliente As Short) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(fecha_venta,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tipo_pago,Byte)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(empresa,Byte)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(cuotas,Byte)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(codigo_cliente,Short)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_numero_factura,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_fecha_venta,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_tipo_pago,Byte)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_empresa,Byte)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_cuotas,Byte)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_codigo_cliente,Short)
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
